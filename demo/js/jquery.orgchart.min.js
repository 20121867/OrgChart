"use strict";!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require("jquery"),window,document):e(jQuery,window,document)}(function(e,t,i,n){var s=function(t,i){this.$chartContainer=e(t),this.opts=i,this.defaultOptions={nodeTitle:"name",nodeId:"id",toggleSiblingsResp:!1,depth:999,chartClass:"",exportButton:!1,exportFilename:"OrgChart",exportFileextension:"png",parentNodeSymbol:"fa-users",draggable:!1,direction:"t2b",pan:!1,zoom:!1,zoominLimit:7,zoomoutLimit:.5}};s.prototype={init:function(t){var i=this;this.options=e.extend({},this.defaultOptions,this.opts,t);var n=this.$chartContainer;this.$chart&&this.$chart.remove();var s=this.options.data,a=this.$chart=e("<div>",{data:{options:this.options},class:"orgchart"+(""!==this.options.chartClass?" "+this.options.chartClass:"")+("t2b"!==this.options.direction?" "+this.options.direction:""),click:function(t){e(t.target).closest(".node").length||a.find(".node.focused").removeClass("focused")}});if("undefined"!=typeof MutationObserver&&this.triggerInitEvent(),"object"===e.type(s)?s instanceof e?this.buildHierarchy(a,this.buildJsonDS(s.children()),0,this.options):this.buildHierarchy(a,this.options.ajaxURL?s:this.attachRel(s,"00"),0,this.options):(a.append('<i class="fa fa-circle-o-notch fa-spin spinner"></i>'),e.ajax({url:s,dataType:"json"}).done(function(e,t,n){i.buildHierarchy(a,i.options.ajaxURL?e:i.attachRel(e,"00"),0,i.options)}).fail(function(e,t,i){console.log(i)}).always(function(){a.children(".spinner").remove()})),n.append(a),this.options.exportButton&&!n.find(".oc-export-btn").length){var o=e("<button>",{class:"oc-export-btn"+(""!==this.options.chartClass?" "+this.options.chartClass:""),text:"Export",click:function(e){e.preventDefault(),i.export()}});n.append(o)}return this.options.pan&&this.bindPan(),this.options.zoom&&this.bindZoom(),this},triggerInitEvent:function(){var t=this,i=new MutationObserver(function(n){i.disconnect();e:for(var s=0;s<n.length;s++)for(var a=0;a<n[s].addedNodes.length;a++)if(n[s].addedNodes[a].classList.contains("orgchart")&&t.options.initCompleted&&"function"==typeof t.options.initCompleted){t.options.initCompleted(t.$chart);var o=e.Event("init.orgchart");$chart.trigger(o);break e}});i.observe(this.$chartContainer[0],{childList:!0})},setOptions:function(e,t){return"string"==typeof e&&("pan"===e&&(t?this.bindPan():this.unbindPan()),"zoom"===e&&(t?this.bindZoom():this.unbindZoom())),"object"==typeof e&&(e.data?this.init(e):(void 0!==e.pan&&(e.pan?this.bindPan():this.unbindPan()),void 0!==e.zoom&&(e.zoom?this.bindZoom():this.unbindZoom()))),this},panStartHandler:function(t){var i=e(t.delegateTarget);if(e(t.target).closest(".node").length||t.touches&&t.touches.length>1)i.data("panning",!1);else{i.css("cursor","move").data("panning",!0);var n=0,s=0,a=i.css("transform");if("none"!==a){var o=a.split(",");-1===a.indexOf("3d")?(n=parseInt(o[4]),s=parseInt(o[5])):(n=parseInt(o[12]),s=parseInt(o[13]))}var d=0,r=0;if(t.targetTouches){if(1===t.targetTouches.length)d=t.targetTouches[0].pageX-n,r=t.targetTouches[0].pageY-s;else if(t.targetTouches.length>1)return}else d=t.pageX-n,r=t.pageY-s;i.on("mousemove touchmove",function(e){if(i.data("panning")){var t=0,n=0;if(e.targetTouches){if(1===e.targetTouches.length)t=e.targetTouches[0].pageX-d,n=e.targetTouches[0].pageY-r;else if(e.targetTouches.length>1)return}else t=e.pageX-d,n=e.pageY-r;var s=i.css("transform");if("none"===s)-1===s.indexOf("3d")?i.css("transform","matrix(1, 0, 0, 1, "+t+", "+n+")"):i.css("transform","matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, "+t+", "+n+", 0, 1)");else{var a=s.split(",");-1===s.indexOf("3d")?(a[4]=" "+t,a[5]=" "+n+")"):(a[12]=" "+t,a[13]=" "+n),i.css("transform",a.join(","))}}})}},panEndHandler:function(e){e.data.chart.data("panning")&&e.data.chart.data("panning",!1).css("cursor","default").off("mousemove")},bindPan:function(){this.$chartContainer.css("overflow","hidden"),this.$chart.on("mousedown touchstart",this.panStartHandler),e(i).on("mouseup touchend",{chart:this.$chart},this.panEndHandler)},unbindPan:function(){this.$chartContainer.css("overflow","auto"),this.$chart.off("mousedown touchstart",this.panStartHandler),e(i).off("mouseup touchend",this.panEndHandler)},zoomWheelHandler:function(e){var t=e.data.oc;e.preventDefault();var i=1+(e.originalEvent.deltaY>0?-.2:.2);t.setChartScale(t.$chart,i)},zoomStartHandler:function(e){if(e.touches&&2===e.touches.length){var t=e.data.oc;t.$chart.data("pinching",!0);var i=t.getPinchDist(e);t.$chart.data("pinchDistStart",i)}},zoomingHandler:function(e){var t=e.data.oc;if(t.$chart.data("pinching")){var i=t.getPinchDist(e);t.$chart.data("pinchDistEnd",i)}},zoomEndHandler:function(e){var t=e.data.oc;if(t.$chart.data("pinching")){t.$chart.data("pinching",!1);var i=t.$chart.data("pinchDistEnd")-t.$chart.data("pinchDistStart");i>0?t.setChartScale(t.$chart,1.2):i<0&&t.setChartScale(t.$chart,.8)}},bindZoom:function(){this.$chartContainer.on("wheel",{oc:this},this.zoomWheelHandler),this.$chartContainer.on("touchstart",{oc:this},this.zoomStartHandler),e(i).on("touchmove",{oc:this},this.zoomingHandler),e(i).on("touchend",{oc:this},this.zoomEndHandler)},unbindZoom:function(){this.$chartContainer.off("wheel",this.zoomWheelHandler),this.$chartContainer.off("touchstart",this.zoomStartHandler),e(i).off("touchmove",this.zoomingHandler),e(i).off("touchend",this.zoomEndHandler)},getPinchDist:function(e){return Math.sqrt((e.touches[0].clientX-e.touches[1].clientX)*(e.touches[0].clientX-e.touches[1].clientX)+(e.touches[0].clientY-e.touches[1].clientY)*(e.touches[0].clientY-e.touches[1].clientY))},setChartScale:function(e,i){var n=e.data("options"),s=e.css("transform"),a="",o=1;"none"===s?e.css("transform","scale("+i+","+i+")"):(a=s.split(","),-1===s.indexOf("3d")?(o=Math.abs(t.parseFloat(a[3])*i))>n.zoomoutLimit&&o<n.zoominLimit&&e.css("transform",s+" scale("+i+","+i+")"):(o=Math.abs(t.parseFloat(a[1])*i))>n.zoomoutLimit&&o<n.zoominLimit&&e.css("transform",s+" scale3d("+i+","+i+", 1)"))},buildJsonDS:function(t){var i=this,n={name:t.contents().eq(0).text().trim(),relationship:(t.parent().parent().is("li")?"1":"0")+(t.siblings("li").length?1:0)+(t.children("ul").length?1:0)};return t[0].id&&(n.id=t[0].id),t.children("ul").children().each(function(){n.children||(n.children=[]),n.children.push(i.buildJsonDS(e(this)))}),n},attachRel:function(e,t){var i=this;return e.relationship=t+(e.children&&e.children.length>0?1:0),e.children&&e.children.forEach(function(t){i.attachRel(t,"1"+(e.children.length>1?1:0))}),e},loopChart:function(t){var i=this,n=t.find("tr:first"),s={id:n.find(".node")[0].id};return n.siblings(":last").children().each(function(){s.children||(s.children=[]),s.children.push(i.loopChart(e(this)))}),s},getHierarchy:function(){return void 0===this.$chart?"Error: orgchart does not exist":this.$chart.find(".node").length?this.$chart.find(".node")[0].id?this.loopChart(this.$chart):"Error: Nodes of orghcart to be exported must have id attribute!":"Error: nodes do not exist"},getNodeState:function(e,t){var i={};if("parent"===(t=t||"self")){if((i=e.closest(".nodes").siblings(":first")).length)return i.is(".hidden")||!i.is(".hidden")&&i.closest(".nodes").is(".hidden")?{exist:!0,visible:!1}:{exist:!0,visible:!0}}else if("children"===t){if((i=e.closest("tr").siblings(":last")).length)return i.is(".hidden")?{exist:!0,visible:!1}:{exist:!0,visible:!0}}else if("siblings"===t){if((i=e.closest("table").parent().siblings()).length)return i.is(".hidden")||i.parent().is(".hidden")?{exist:!0,visible:!1}:{exist:!0,visible:!0}}else if((i=e).length)return i.closest(".nodes").length&&i.closest(".nodes").is(".hidden")||i.closest("table").parent().length&&i.closest("table").parent().is(".hidden")||i.parent().is("li")&&(i.closest("ul").is(".hidden")||i.closest("verticalNodes").is(".hidden"))?{exist:!0,visible:!1}:{exist:!0,visible:!0};return{exist:!1,visible:!1}},getRelatedNodes:function(t,i){return t&&t instanceof e&&t.is(".node")?"parent"===i?t.closest(".nodes").parent().children(":first").find(".node"):"children"===i?t.closest("tr").siblings(".nodes").children().find(".node:first"):"siblings"===i?t.closest("table").parent().siblings().find(".node:first"):e():e()},hideParentEnd:function(t){e(t.target).removeClass("sliding"),t.data.upperLevel.addClass("hidden").slice(1).removeAttr("style")},hideParent:function(e){var t=e.closest(".nodes").siblings();t.eq(0).find(".spinner").length&&e.closest(".orgchart").data("inAjax",!1),this.getNodeState(e,"siblings").visible&&this.hideSiblings(e),t.slice(1).css("visibility","hidden");var i=t.eq(0).find(".node");this.getNodeState(i).visible&&i.addClass("sliding slide-down").one("transitionend",{upperLevel:t},this.hideParentEnd),this.getNodeState(i,"parent").visible&&this.hideParent(i)},showParentEnd:function(t){var i=t.data.node;e(t.target).removeClass("sliding"),this.isInAction(i)&&this.switchVerticalArrow(i.children(".topEdge"))},showParent:function(e){var t=e.closest(".nodes").siblings().removeClass("hidden");t.eq(2).children().slice(1,-1).addClass("hidden");var i=t.eq(0).find(".node");this.repaint(i[0]),i.addClass("sliding").removeClass("slide-down").one("transitionend",{node:e},this.showParentEnd.bind(this))},stopAjax:function(e){e.find(".spinner").length&&e.closest(".orgchart").data("inAjax",!1)},isVisibleNode:function(t,i){return this.getNodeState(e(i)).visible},hideChildrenEnd:function(e){e.data.visibleNodes.removeClass("sliding"),e.data.isVerticalDesc?e.data.lowerLevel.addClass("hidden"):(e.data.visibleNodes.closest("table").closest("tr").prevAll(".lines").removeAttr("style").addClass("hidden").siblings(".nodes").addClass("hidden"),e.data.lowerLevel.last().find(".verticalNodes").addClass("hidden")),this.isInAction(e.data.node)&&this.switchVerticalArrow(e.data.node.children(".bottomEdge"))},hideChildren:function(e){var t=e.closest("tr").siblings();this.stopAjax(t.last());var i=t.last().find(".node").filter(this.isVisibleNode.bind(this)),n=!!t.last().is(".verticalNodes");n||i.closest("table").closest("tr").prevAll(".lines").css("visibility","hidden"),this.repaint(i.get(0)),i.addClass("sliding slide-up").eq(0).one("transitionend",{visibleNodes:i,lowerLevel:t,isVerticalDesc:n,node:e},this.hideChildrenEnd.bind(this))},showChildren:function(e){var t=this,i=e.closest("tr").siblings(),n=!!i.is(".verticalNodes")?i.removeClass("hidden").find(".node").filter(this.isVisibleNode.bind(this)):i.removeClass("hidden").eq(2).children().find(".node:first").filter(this.isVisibleNode.bind(this));this.repaint(n.get(0)),n.addClass("sliding").removeClass("slide-up").eq(0).one("transitionend",function(){n.removeClass("sliding"),t.isInAction(e)&&t.switchVerticalArrow(e.children(".bottomEdge"))})},hideSiblingsEnd:function(e){var t=e.data.node,i=e.data.nodeContainer,n=e.data.direction;e.data.lines.removeAttr("style");var s=n?"left"===n?i.prevAll(":not(.hidden)"):i.nextAll(":not(.hidden)"):i.siblings();i.closest(".nodes").prev().children(":not(.hidden)").slice(1,n?2*s.length+1:-1).addClass("hidden"),e.data.animatedNodes.removeClass("sliding"),s.find(".node:gt(0)").filter(this.isVisibleNode.bind(this)).removeClass("slide-left slide-right").addClass("slide-up"),s.find(".lines, .nodes, .verticalNodes").addClass("hidden").end().addClass("hidden"),this.isInAction(t)&&this.switchHorizontalArrow(t)},hideSiblings:function(e,t){var i=e.closest("table").parent();i.siblings().find(".spinner").length&&e.closest(".orgchart").data("inAjax",!1),t?"left"===t?i.prevAll().find(".node").filter(this.isVisibleNode.bind(this)).addClass("sliding slide-right"):i.nextAll().find(".node").filter(this.isVisibleNode.bind(this)).addClass("sliding slide-left"):(i.prevAll().find(".node").filter(this.isVisibleNode.bind(this)).addClass("sliding slide-right"),i.nextAll().find(".node").filter(this.isVisibleNode.bind(this)).addClass("sliding slide-left"));var n=i.siblings().find(".sliding"),s=n.closest(".nodes").prevAll(".lines").css("visibility","hidden");n.eq(0).one("transitionend",{node:e,nodeContainer:i,direction:t,animatedNodes:n,lines:s},this.hideSiblingsEnd.bind(this))},showSiblingsEnd:function(e){var t=e.data.node;e.data.visibleNodes.removeClass("sliding"),this.isInAction(t)&&(this.switchHorizontalArrow(t),t.children(".topEdge").removeClass("fa-chevron-up").addClass("fa-chevron-down"))},showSiblings:function(t,i){var n=e();n=i?"left"===i?t.closest("table").parent().prevAll().removeClass("hidden"):t.closest("table").parent().nextAll().removeClass("hidden"):t.closest("table").parent().siblings().removeClass("hidden");var s=t.closest("table").closest("tr").siblings();if(i?s.eq(2).children(".hidden").slice(0,2*n.length).removeClass("hidden"):s.eq(2).children(".hidden").removeClass("hidden"),!this.getNodeState(t,"parent").visible){s.removeClass("hidden");var a=s.find(".node")[0];this.repaint(a),e(a).addClass("sliding").removeClass("slide-down").one("transitionend",function(){e(this).removeClass("sliding")})}var o=n.find(".node").filter(this.isVisibleNode.bind(this));this.repaint(o.get(0)),o.addClass("sliding").removeClass("slide-left slide-right"),o.eq(0).one("transitionend",{node:t,visibleNodes:o},this.showSiblingsEnd.bind(this))},startLoading:function(t,i,n){var s=i.closest(".orgchart");return(void 0===s.data("inAjax")||!0!==s.data("inAjax"))&&(t.addClass("hidden"),i.append('<i class="fa fa-circle-o-notch fa-spin spinner"></i>'),i.children().not(".spinner").css("opacity",.2),s.data("inAjax",!0),e(".oc-export-btn"+(""!==n.chartClass?"."+n.chartClass:"")).prop("disabled",!0),!0)},endLoading:function(t,i,n){var s=i.closest("div.orgchart");t.removeClass("hidden"),i.find(".spinner").remove(),i.children().removeAttr("style"),s.data("inAjax",!1),e(".oc-export-btn"+(""!==n.chartClass?"."+n.chartClass:"")).prop("disabled",!1)},isInAction:function(e){return e.children(".edge").attr("class").indexOf("fa-")>-1},switchVerticalArrow:function(e){e.toggleClass("fa-chevron-up").toggleClass("fa-chevron-down")},switchHorizontalArrow:function(e){var t=e.closest(".orgchart").data("options");if(t.toggleSiblingsResp&&(void 0===t.ajaxURL||e.closest(".nodes").data("siblingsLoaded"))){var i=e.closest("table").parent().prev();i.length&&(i.is(".hidden")?e.children(".leftEdge").addClass("fa-chevron-left").removeClass("fa-chevron-right"):e.children(".leftEdge").addClass("fa-chevron-right").removeClass("fa-chevron-left"));var n=e.closest("table").parent().next();n.length&&(n.is(".hidden")?e.children(".rightEdge").addClass("fa-chevron-right").removeClass("fa-chevron-left"):e.children(".rightEdge").addClass("fa-chevron-left").removeClass("fa-chevron-right"))}else{var s=e.closest("table").parent().siblings(),a=!!s.length&&!s.is(".hidden");e.children(".leftEdge").toggleClass("fa-chevron-right",a).toggleClass("fa-chevron-left",!a),e.children(".rightEdge").toggleClass("fa-chevron-left",a).toggleClass("fa-chevron-right",!a)}},repaint:function(e){e&&(e.style.offsetWidth=e.offsetWidth)},createNode:function(n,s,a){var o=this;n.children||(n.children=[]),e.each(n.children,function(e,t){t.parentId=n.id});var d=e.Deferred(),r=e("<div"+(a.draggable?' draggable="true"':"")+(n[a.nodeId]?' id="'+n[a.nodeId]+'"':"")+(n.parentId?' data-parent="'+n.parentId+'"':"")+">").addClass("node "+(n.className||"")+(s>=a.depth?" slide-up":""));a.nodeTemplate?r.append(a.nodeTemplate(n)):r.append('<div class="title">'+n[a.nodeTitle]+"</div>").append(void 0!==a.nodeContent?'<div class="content">'+(n[a.nodeContent]||"")+"</div>":"");var l=n.relationship||"";if(a.verticalDepth&&s+2>a.verticalDepth){if(s+1>=a.verticalDepth&&Number(l.substr(2,1))){var c=s+1>=a.depth?"plus":"minus";r.append('<i class="toggleBtn fa fa-'+c+'-square"></i>')}}else Number(l.substr(0,1))&&r.append('<i class="edge verticalEdge topEdge fa"></i>'),Number(l.substr(1,1))&&r.append('<i class="edge horizontalEdge rightEdge fa"></i><i class="edge horizontalEdge leftEdge fa"></i>'),Number(l.substr(2,1))&&r.append('<i class="edge verticalEdge bottomEdge fa"></i>').children(".title").prepend('<i class="fa '+a.parentNodeSymbol+' symbol"></i>');return r.on("mouseenter mouseleave",function(t){var i=e(this),n=!1,s=i.children(".topEdge"),a=(i.children(".rightEdge"),i.children(".bottomEdge")),d=i.children(".leftEdge");"mouseenter"===t.type?(s.length&&(n=o.getNodeState(i,"parent").visible,s.toggleClass("fa-chevron-up",!n).toggleClass("fa-chevron-down",n)),a.length&&(n=o.getNodeState(i,"children").visible,a.toggleClass("fa-chevron-down",!n).toggleClass("fa-chevron-up",n)),d.length&&o.switchHorizontalArrow(i)):i.children(".edge").removeClass("fa-chevron-up fa-chevron-down fa-chevron-right fa-chevron-left")}),r.on("click",function(t){e(this).closest(".orgchart").find(".focused").removeClass("focused"),e(this).addClass("focused")}),r.on("click",".topEdge",function(t){t.stopPropagation();var i=e(this),s=i.parent(),d=o.getNodeState(s,"parent");if(d.exist){var r=s.closest("table").closest("tr").siblings(":first").find(".node");if(r.is(".sliding"))return;d.visible?(o.hideParent(s),r.one("transitionend",function(){o.isInAction(s)&&(o.switchVerticalArrow(i),o.switchHorizontalArrow(s))})):o.showParent(s)}else{var l=i.parent()[0].id;o.startLoading(i,s,a)&&e.ajax({url:e.isFunction(a.ajaxURL.parent)?a.ajaxURL.parent(n):a.ajaxURL.parent+l,dataType:"json"}).done(function(t){s.closest(".orgchart").data("inAjax")&&(e.isEmptyObject(t)||o.addParent(s,t,a))}).fail(function(){console.log("Failed to get parent node data")}).always(function(){o.endLoading(i,s,a)})}}),r.on("click",".bottomEdge",function(t){t.stopPropagation();var i=e(this),s=i.parent(),d=o.getNodeState(s,"children");if(d.exist){if(s.closest("tr").siblings(":last").find(".sliding").length)return;d.visible?o.hideChildren(s):o.showChildren(s)}else{var r=i.parent()[0].id;o.startLoading(i,s,a)&&e.ajax({url:e.isFunction(a.ajaxURL.children)?a.ajaxURL.children(n):a.ajaxURL.children+r,dataType:"json"}).done(function(t,i,n){s.closest(".orgchart").data("inAjax")&&t.children.length&&o.addChildren(s,t,e.extend({},a,{depth:0}))}).fail(function(e,t,i){console.log("Failed to get children nodes data")}).always(function(){o.endLoading(i,s,a)})}}),r.on("click",".toggleBtn",function(t){var i=e(this),n=i.parent().next(),s=n.find(".node"),a=n.children().children(".node");a.is(".sliding")||(i.toggleClass("fa-plus-square fa-minus-square"),s.eq(0).is(".slide-up")?(n.removeClass("hidden"),o.repaint(a.get(0)),a.addClass("sliding").removeClass("slide-up").eq(0).one("transitionend",function(){a.removeClass("sliding")})):(s.addClass("sliding slide-up").eq(0).one("transitionend",function(){s.removeClass("sliding"),s.closest("ul").addClass("hidden")}),s.find(".toggleBtn").removeClass("fa-minus-square").addClass("fa-plus-square")))}),r.on("click",".leftEdge, .rightEdge",function(t){t.stopPropagation();var i=e(this),s=i.parent(),d=o.getNodeState(s,"siblings");if(d.exist){if(s.closest("table").parent().siblings().find(".sliding").length)return;if(a.toggleSiblingsResp){var r=s.closest("table").parent().prev(),l=s.closest("table").parent().next();i.is(".leftEdge")?r.is(".hidden")?o.showSiblings(s,"left"):o.hideSiblings(s,"left"):l.is(".hidden")?o.showSiblings(s,"right"):o.hideSiblings(s,"right")}else d.visible?o.hideSiblings(s):o.showSiblings(s)}else{var c=i.parent()[0].id,h=o.getNodeState(s,"parent").exist?e.isFunction(a.ajaxURL.siblings)?a.ajaxURL.siblings(n):a.ajaxURL.siblings+c:e.isFunction(a.ajaxURL.families)?a.ajaxURL.families(n):a.ajaxURL.families+c;o.startLoading(i,s,a)&&e.ajax({url:h,dataType:"json"}).done(function(e,t,i){s.closest(".orgchart").data("inAjax")&&(e.siblings||e.children)&&o.addSiblings(s,e,a)}).fail(function(e,t,i){console.log("Failed to get sibling nodes data")}).always(function(){o.endLoading(i,s,a)})}}),a.draggable&&r.on("dragstart",function(n){var s=n.originalEvent,o=/firefox/.test(t.navigator.userAgent.toLowerCase());if(o&&s.dataTransfer.setData("text/html","hack for firefox"),"none"!==r.closest(".orgchart").css("transform")){var d,l;i.querySelector(".ghost-node")?(d=r.closest(".orgchart").children(".ghost-node").get(0),l=e(d).children().get(0)):((d=i.createElementNS("http://www.w3.org/2000/svg","svg")).classList.add("ghost-node"),l=i.createElementNS("http://www.w3.org/2000/svg","rect"),d.appendChild(l),r.closest(".orgchart").append(d));var c=r.closest(".orgchart").css("transform").split(","),h=Math.abs(t.parseFloat("t2b"===a.direction||"b2t"===a.direction?c[0].slice(c[0].indexOf("(")+1):c[1]));d.setAttribute("width",r.outerWidth(!1)),d.setAttribute("height",r.outerHeight(!1)),l.setAttribute("x",5*h),l.setAttribute("y",5*h),l.setAttribute("width",120*h),l.setAttribute("height",40*h),l.setAttribute("rx",4*h),l.setAttribute("ry",4*h),l.setAttribute("stroke-width",1*h);var g=s.offsetX*h,f=s.offsetY*h;if("l2r"===a.direction?(g=s.offsetY*h,f=s.offsetX*h):"r2l"===a.direction?(g=r.outerWidth(!1)-s.offsetY*h,f=s.offsetX*h):"b2t"===a.direction&&(g=r.outerWidth(!1)-s.offsetX*h,f=r.outerHeight(!1)-s.offsetY*h),o){l.setAttribute("fill","rgb(255, 255, 255)"),l.setAttribute("stroke","rgb(191, 0, 0)");var p=i.createElement("img");p.src="data:image/svg+xml;utf8,"+(new XMLSerializer).serializeToString(d),s.dataTransfer.setDragImage(p,g,f)}else s.dataTransfer.setDragImage(d,g,f)}var v=e(this),u=v.closest(".nodes").siblings().eq(0).find(".node:first"),b=v.closest("table").find(".node");v.closest(".orgchart").data("dragged",v).find(".node").each(function(t,i){-1===b.index(i)&&(a.dropCriteria?a.dropCriteria(v,u,e(i))&&e(i).addClass("allowedDrop"):e(i).addClass("allowedDrop"))})}).on("dragover",function(t){t.preventDefault(),e(this).is(".allowedDrop")||(t.originalEvent.dataTransfer.dropEffect="none")}).on("dragend",function(t){e(this).closest(".orgchart").find(".allowedDrop").removeClass("allowedDrop")}).on("drop",function(t){var i=e(this),n=i.closest(".orgchart"),s=n.data("dragged"),a=s.closest(".nodes").siblings().eq(0).children(),o=e.Event("nodedrop.orgchart");if(n.trigger(o,{draggedNode:s,dragZone:a.children(),dropZone:i}),!o.isDefaultPrevented()){if(i.closest("tr").siblings().length){var d=parseInt(i.parent().attr("colspan"))+2,r='<i class="edge horizontalEdge rightEdge fa"></i><i class="edge horizontalEdge leftEdge fa"></i>';i.closest("tr").next().addBack().children().attr("colspan",d),s.find(".horizontalEdge").length||s.append(r),i.closest("tr").siblings().eq(1).children(":last").before('<td class="leftLine topLine">&nbsp;</td><td class="rightLine topLine">&nbsp;</td>').end().next().append(s.closest("table").parent());var l=s.closest("table").parent().siblings().find(".node:first");1===l.length&&l.append(r)}else i.append('<i class="edge verticalEdge bottomEdge fa"></i>').parent().attr("colspan",2).parent().after('<tr class="lines"><td colspan="2"><div class="downLine"></div></td></tr><tr class="lines"><td class="rightLine">&nbsp;</td><td class="leftLine">&nbsp;</td></tr><tr class="nodes"></tr>').siblings(":last").append(s.find(".horizontalEdge").remove().end().closest("table").parent());var c=parseInt(a.attr("colspan"));if(c>2){a.attr("colspan",c-2).parent().next().children().attr("colspan",c-2).end().next().children().slice(1,3).remove();var h=a.parent().siblings(".nodes").children().find(".node:first");1===h.length&&h.find(".horizontalEdge").remove()}else a.removeAttr("colspan").find(".bottomEdge").remove().end().end().siblings().remove()}}),a.createNode&&a.createNode(r,n),d.resolve(r),d.promise()},buildHierarchy:function(t,i,n,s,a){var o,d=this,r=i.children,l=!!r&&r.length,c=!!(s.verticalDepth&&n+1>=s.verticalDepth);if(Object.keys(i).length>1&&(o=c?t:e("<table>"),c||t.append(o),e.when(this.createNode(i,n,s)).done(function(e){c?o.append(e):o.append(e.wrap("<tr><td"+(l?' colspan="'+2*r.length+'"':"")+"></td></tr>").closest("tr")),a&&a()}).fail(function(){console.log("Failed to creat node")})),l){1===Object.keys(i).length&&(o=t);var h=n+1>=s.depth||i.collapsed?" hidden":"",g=!!(s.verticalDepth&&n+2>=s.verticalDepth);g||o.append('<tr class="lines'+h+'"><td colspan="'+2*r.length+'"><div class="downLine"></div></td></tr>');for(var f='<tr class="lines'+h+'"><td class="rightLine">&nbsp;</td>',p=1;p<r.length;p++)f+='<td class="leftLine topLine">&nbsp;</td><td class="rightLine topLine">&nbsp;</td>';f+='<td class="leftLine">&nbsp;</td></tr>';var v;g?(v=e("<ul>"),h&&s.depth+1!==s.verticalDepth&&v.addClass(h),n+2===s.verticalDepth?o.append('<tr class="verticalNodes'+h+'"><td></td></tr>').find(".verticalNodes").children().append(v):o.append(v)):(v=e('<tr class="nodes'+h+'">'),o.append(f).append(v)),e.each(r,function(){var t=e(g?"<li>":'<td colspan="2">');v.append(t),d.buildHierarchy(t,this,n+1,s,a)})}},buildChildNode:function(e,t,i,n){var i=i||e.closest(".orgchart").data("options"),s=t.children||t.siblings;e.find("td:first").attr("colspan",2*s.length),this.buildHierarchy(e,{children:s},0,i,n)},addChildren:function(e,t,i){var n=this,i=i||e.closest(".orgchart").data("options"),s=0;this.buildChildNode(e.closest("table"),t,i,function(){++s===t.children.length&&(e.children(".bottomEdge").length||e.append('<i class="edge verticalEdge bottomEdge fa"></i>'),e.find(".symbol").length||e.children(".title").prepend('<i class="fa '+i.parentNodeSymbol+' symbol"></i>'),n.showChildren(e))})},buildParentNode:function(t,i,n,s){var a=this,o=e("<table>");i.relationship=i.relationship||"001",e.when(this.createNode(i,0,n||t.closest(".orgchart").data("options"))).done(function(e){o.append(e.removeClass("slide-up").addClass("slide-down").wrap('<tr class="hidden"><td colspan="2"></td></tr>').closest("tr")),o.append('<tr class="lines hidden"><td colspan="2"><div class="downLine"></div></td></tr>');o.append('<tr class="lines hidden"><td class="rightLine">&nbsp;</td><td class="leftLine">&nbsp;</td></tr>');var t=a.$chart;t.prepend(o).children("table:first").append('<tr class="nodes"><td colspan="2"></td></tr>').children("tr:last").children().append(t.children("table").last()),s()}).fail(function(){console.log("Failed to create parent node")})},addParent:function(e,t,i){var n=this;this.buildParentNode(e,t,i,function(){e.children(".topEdge").length||e.children(".title").after('<i class="edge verticalEdge topEdge fa"></i>'),n.showParent(e)})},complementLine:function(e,t,i){for(var n="",s=0;s<i;s++)n+='<td class="leftLine topLine">&nbsp;</td><td class="rightLine topLine">&nbsp;</td>';e.parent().prevAll("tr:gt(0)").children().attr("colspan",2*t).end().next().children(":first").after(n)},buildSiblingNode:function(t,i,n,s){var a=this,n=n||t.closest(".orgchart").data("options"),o=i.siblings?i.siblings.length:i.children.length,d=t.parent().is("td")?t.closest("tr").children().length:1,r=d+o,l=r>1?Math.floor(r/2-1):0;if(t.parent().is("td")){t.closest("tr").prevAll("tr:last");t.closest("tr").prevAll("tr:lt(2)").remove();var c=0;this.buildChildNode(t.parent().closest("table"),i,n,function(){if(++c===o){var e=t.parent().closest("table").children("tr:last").children("td");d>1?(a.complementLine(e.eq(0).before(t.closest("td").siblings().addBack().unwrap()),r,d),e.addClass("hidden").find(".node").addClass("slide-left")):(a.complementLine(e.eq(l).after(t.closest("td").unwrap()),r,1),e.not(":eq("+l+"1)").addClass("hidden").slice(0,l).find(".node").addClass("slide-right").end().end().slice(l).find(".node").addClass("slide-left")),s()}})}else{var h=0;this.buildHierarchy(t.closest(".orgchart"),i,0,n,function(){++h===r&&(a.complementLine(t.next().children("tr:last").children().eq(l).after(e('<td colspan="2">').append(t)),r,1),t.closest("tr").siblings().eq(0).addClass("hidden").find(".node").addClass("slide-down"),t.parent().siblings().addClass("hidden").slice(0,l).find(".node").addClass("slide-right").end().end().slice(l).find(".node").addClass("slide-left"),s())})}},addSiblings:function(e,t,i){var n=this;this.buildSiblingNode(e.closest("table"),t,i,function(){e.closest(".nodes").data("siblingsLoaded",!0),e.children(".leftEdge").length||e.children(".topEdge").after('<i class="edge horizontalEdge rightEdge fa"></i><i class="edge horizontalEdge leftEdge fa"></i>'),n.showSiblings(e)})},removeNodes:function(e){var t=e.closest("table").parent(),i=t.parent().siblings();t.is("td")?this.getNodeState(e,"siblings").exist?(i.eq(2).children(".topLine:lt(2)").remove(),i.slice(0,2).children().attr("colspan",i.eq(2).children().length),t.remove()):i.eq(0).children().removeAttr("colspan").find(".bottomEdge").remove().end().end().siblings().remove():t.add(t.siblings()).remove()},export:function(n,s){var a=this;if(n=void 0!==n?n:this.options.exportFilename,s=void 0!==s?s:this.options.exportFileextension,e(this).children(".spinner").length)return!1;var o=this.$chartContainer,d=o.find(".mask");d.length?d.removeClass("hidden"):o.append('<div class="mask"><i class="fa fa-circle-o-notch fa-spin spinner"></i></div>');var r=o.addClass("canvasContainer").find('.orgchart:not(".hidden")').get(0),l="l2r"===a.options.direction||"r2l"===a.options.direction;html2canvas(r,{width:l?r.clientHeight:r.clientWidth,height:l?r.clientWidth:r.clientHeight,onclone:function(t){e(t).find(".canvasContainer").css("overflow","visible").find('.orgchart:not(".hidden"):first').css("transform","")},onrendered:function(e){if(o.find(".mask").addClass("hidden"),"pdf"===s.toLowerCase()){var d={},r=Math.floor(.2646*e.width),l=Math.floor(.2646*e.height);(d=r>l?new jsPDF("l","mm",[r,l]):new jsPDF("p","mm",[l,r])).addImage(e.toDataURL(),"png",0,0),d.save(n+".pdf")}else{var c="WebkitAppearance"in i.documentElement.style,h=!!t.sidebar,g="Microsoft Internet Explorer"===navigator.appName||"Netscape"===navigator.appName&&navigator.appVersion.indexOf("Edge")>-1;if(!c&&!h||g)t.navigator.msSaveBlob(e.msToBlob(),n+".png");else{var f=".oc-download-btn"+(""!==a.options.chartClass?"."+a.options.chartClass:"");o.find(f).length||o.append('<a class="oc-download-btn'+(""!==a.options.chartClass?" "+a.options.chartClass:"")+'" download="'+n+'.png"></a>'),o.find(f).attr("href",e.toDataURL())[0].click()}}}}).then(function(){o.removeClass("canvasContainer")},function(){o.removeClass("canvasContainer")})}},e.fn.orgchart=function(e){return new s(this,e).init()}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL2pxdWVyeS5vcmdjaGFydC5qcyJdLCJuYW1lcyI6WyJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImpRdWVyeSIsIiQiLCJ1bmRlZmluZWQiLCJPcmdDaGFydCIsImVsZW0iLCJvcHRzIiwidGhpcyIsIiRjaGFydENvbnRhaW5lciIsImRlZmF1bHRPcHRpb25zIiwibm9kZVRpdGxlIiwibm9kZUlkIiwidG9nZ2xlU2libGluZ3NSZXNwIiwiZGVwdGgiLCJjaGFydENsYXNzIiwiZXhwb3J0QnV0dG9uIiwiZXhwb3J0RmlsZW5hbWUiLCJleHBvcnRGaWxlZXh0ZW5zaW9uIiwicGFyZW50Tm9kZVN5bWJvbCIsImRyYWdnYWJsZSIsImRpcmVjdGlvbiIsInBhbiIsInpvb20iLCJ6b29taW5MaW1pdCIsInpvb21vdXRMaW1pdCIsInByb3RvdHlwZSIsImluaXQiLCJ0aGF0Iiwib3B0aW9ucyIsImV4dGVuZCIsIiRjaGFydCIsInJlbW92ZSIsImRhdGEiLCJjbGFzcyIsImNsaWNrIiwiZXZlbnQiLCJ0YXJnZXQiLCJjbG9zZXN0IiwibGVuZ3RoIiwiZmluZCIsInJlbW92ZUNsYXNzIiwiTXV0YXRpb25PYnNlcnZlciIsInRyaWdnZXJJbml0RXZlbnQiLCJ0eXBlIiwiYnVpbGRIaWVyYXJjaHkiLCJidWlsZEpzb25EUyIsImNoaWxkcmVuIiwiYWpheFVSTCIsImF0dGFjaFJlbCIsImFwcGVuZCIsImFqYXgiLCJ1cmwiLCJkYXRhVHlwZSIsImRvbmUiLCJ0ZXh0U3RhdHVzIiwianFYSFIiLCJmYWlsIiwiZXJyb3JUaHJvd24iLCJjb25zb2xlIiwibG9nIiwiYWx3YXlzIiwiJGV4cG9ydEJ0biIsInRleHQiLCJlIiwicHJldmVudERlZmF1bHQiLCJleHBvcnQiLCJiaW5kUGFuIiwiYmluZFpvb20iLCJtbyIsIm11dGF0aW9ucyIsImRpc2Nvbm5lY3QiLCJpbml0VGltZSIsImkiLCJqIiwiYWRkZWROb2RlcyIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiaW5pdENvbXBsZXRlZCIsImluaXRFdmVudCIsIkV2ZW50IiwidHJpZ2dlciIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzZXRPcHRpb25zIiwidmFsIiwidW5iaW5kUGFuIiwidW5iaW5kWm9vbSIsInBhblN0YXJ0SGFuZGxlciIsImRlbGVnYXRlVGFyZ2V0IiwidG91Y2hlcyIsImNzcyIsImxhc3RYIiwibGFzdFkiLCJsYXN0VGYiLCJ0ZW1wIiwic3BsaXQiLCJpbmRleE9mIiwicGFyc2VJbnQiLCJzdGFydFgiLCJzdGFydFkiLCJ0YXJnZXRUb3VjaGVzIiwicGFnZVgiLCJwYWdlWSIsIm9uIiwibmV3WCIsIm5ld1kiLCJtYXRyaXgiLCJqb2luIiwicGFuRW5kSGFuZGxlciIsImNoYXJ0Iiwib2ZmIiwiem9vbVdoZWVsSGFuZGxlciIsIm9jIiwibmV3U2NhbGUiLCJvcmlnaW5hbEV2ZW50IiwiZGVsdGFZIiwic2V0Q2hhcnRTY2FsZSIsInpvb21TdGFydEhhbmRsZXIiLCJkaXN0IiwiZ2V0UGluY2hEaXN0Iiwiem9vbWluZ0hhbmRsZXIiLCJ6b29tRW5kSGFuZGxlciIsImRpZmYiLCJNYXRoIiwic3FydCIsImNsaWVudFgiLCJjbGllbnRZIiwidGFyZ2V0U2NhbGUiLCJhYnMiLCJwYXJzZUZsb2F0IiwiJGxpIiwic3ViT2JqIiwibmFtZSIsImNvbnRlbnRzIiwiZXEiLCJ0cmltIiwicmVsYXRpb25zaGlwIiwicGFyZW50IiwiaXMiLCJzaWJsaW5ncyIsImlkIiwiZWFjaCIsInB1c2giLCJmbGFncyIsImZvckVhY2giLCJpdGVtIiwibG9vcENoYXJ0IiwiJHRyIiwiZ2V0SGllcmFyY2h5IiwiZ2V0Tm9kZVN0YXRlIiwiJG5vZGUiLCJyZWxhdGlvbiIsIiR0YXJnZXQiLCJleGlzdCIsInZpc2libGUiLCJnZXRSZWxhdGVkTm9kZXMiLCJoaWRlUGFyZW50RW5kIiwidXBwZXJMZXZlbCIsImFkZENsYXNzIiwic2xpY2UiLCJyZW1vdmVBdHRyIiwiaGlkZVBhcmVudCIsIiR1cHBlckxldmVsIiwiaGlkZVNpYmxpbmdzIiwiJHBhcmVudCIsIm9uZSIsInNob3dQYXJlbnRFbmQiLCJub2RlIiwiaXNJbkFjdGlvbiIsInN3aXRjaFZlcnRpY2FsQXJyb3ciLCJzaG93UGFyZW50IiwicmVwYWludCIsImJpbmQiLCJzdG9wQWpheCIsIiRub2RlTGV2ZWwiLCJpc1Zpc2libGVOb2RlIiwiaW5kZXgiLCJoaWRlQ2hpbGRyZW5FbmQiLCJ2aXNpYmxlTm9kZXMiLCJpc1ZlcnRpY2FsRGVzYyIsImxvd2VyTGV2ZWwiLCJwcmV2QWxsIiwibGFzdCIsImhpZGVDaGlsZHJlbiIsIiRsb3dlckxldmVsIiwiJHZpc2libGVOb2RlcyIsImZpbHRlciIsImdldCIsInNob3dDaGlsZHJlbiIsIiRsZXZlbHMiLCIkZGVzY2VuZGFudHMiLCJoaWRlU2libGluZ3NFbmQiLCIkbm9kZUNvbnRhaW5lciIsIm5vZGVDb250YWluZXIiLCJsaW5lcyIsIiRzaWJsaW5ncyIsIm5leHRBbGwiLCJwcmV2IiwiYW5pbWF0ZWROb2RlcyIsImVuZCIsInN3aXRjaEhvcml6b250YWxBcnJvdyIsIiRhbmltYXRlZE5vZGVzIiwiJGxpbmVzIiwic2hvd1NpYmxpbmdzRW5kIiwic2hvd1NpYmxpbmdzIiwic3RhcnRMb2FkaW5nIiwiJGFycm93Iiwibm90IiwicHJvcCIsImVuZExvYWRpbmciLCJhdHRyIiwidG9nZ2xlQ2xhc3MiLCIkcHJldlNpYiIsIiRuZXh0U2liIiwibmV4dCIsIiRzaWJzIiwic2lic1Zpc2libGUiLCJzdHlsZSIsIm9mZnNldFdpZHRoIiwiY3JlYXRlTm9kZSIsIm5vZGVEYXRhIiwibGV2ZWwiLCJjaGlsZCIsInBhcmVudElkIiwiZHRkIiwiRGVmZXJyZWQiLCIkbm9kZURpdiIsImNsYXNzTmFtZSIsIm5vZGVUZW1wbGF0ZSIsIm5vZGVDb250ZW50IiwidmVydGljYWxEZXB0aCIsIk51bWJlciIsInN1YnN0ciIsImljb24iLCJwcmVwZW5kIiwiZmxhZyIsIiR0b3BFZGdlIiwiJGJvdHRvbUVkZ2UiLCIkbGVmdEVkZ2UiLCJzdG9wUHJvcGFnYXRpb24iLCIkdGhhdCIsInBhcmVudFN0YXRlIiwiaXNGdW5jdGlvbiIsImlzRW1wdHlPYmplY3QiLCJhZGRQYXJlbnQiLCJjaGlsZHJlblN0YXRlIiwiYWRkQ2hpbGRyZW4iLCIkdGhpcyIsIiRkZXNjV3JhcHBlciIsIiRjaGlsZHJlbiIsInNpYmxpbmdzU3RhdGUiLCJmYW1pbGllcyIsImFkZFNpYmxpbmdzIiwib3JpZ0V2ZW50IiwiaXNGaXJlZm94IiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRvTG93ZXJDYXNlIiwiZGF0YVRyYW5zZmVyIiwic2V0RGF0YSIsImdob3N0Tm9kZSIsIm5vZGVDb3ZlciIsInF1ZXJ5U2VsZWN0b3IiLCJjcmVhdGVFbGVtZW50TlMiLCJhZGQiLCJhcHBlbmRDaGlsZCIsInRyYW5zVmFsdWVzIiwic2NhbGUiLCJzZXRBdHRyaWJ1dGUiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJ4T2Zmc2V0Iiwib2Zmc2V0WCIsInlPZmZzZXQiLCJvZmZzZXRZIiwiZ2hvc3ROb2RlV3JhcHBlciIsImNyZWF0ZUVsZW1lbnQiLCJzcmMiLCJYTUxTZXJpYWxpemVyIiwic2VyaWFsaXplVG9TdHJpbmciLCJzZXREcmFnSW1hZ2UiLCIkZHJhZ2dlZCIsIiRkcmFnWm9uZSIsIiRkcmFnSGllciIsImRyb3BDcml0ZXJpYSIsImRyb3BFZmZlY3QiLCIkZHJvcFpvbmUiLCIkb3JnY2hhcnQiLCJkcm9wRXZlbnQiLCJkcmFnZ2VkTm9kZSIsImRyYWdab25lIiwiZHJvcFpvbmUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkcm9wQ29sc3BhbiIsImhvcml6b250YWxFZGdlcyIsImFkZEJhY2siLCJiZWZvcmUiLCIkZHJvcFNpYnMiLCJhZnRlciIsImRyYWdDb2xzcGFuIiwiJGRyYWdTaWJzIiwicmVzb2x2ZSIsInByb21pc2UiLCIkYXBwZW5kVG8iLCJjYWxsYmFjayIsIiRub2RlV3JhcHBlciIsIiRjaGlsZE5vZGVzIiwiaGFzQ2hpbGRyZW4iLCJpc1ZlcnRpY2FsTm9kZSIsIk9iamVjdCIsImtleXMiLCJ3aGVuIiwid3JhcCIsImlzSGlkZGVuIiwiY29sbGFwc2VkIiwiaXNWZXJ0aWNhbExheWVyIiwibGluZUxheWVyIiwiJG5vZGVMYXllciIsIiRub2RlQ2VsbCIsImJ1aWxkQ2hpbGROb2RlIiwiY291bnQiLCJidWlsZFBhcmVudE5vZGUiLCIkY3VycmVudFJvb3QiLCIkdGFibGUiLCJjb21wbGVtZW50TGluZSIsIiRvbmVTaWJsaW5nIiwic2libGluZ0NvdW50IiwiZXhpc3RpbmdTaWJsaWdDb3VudCIsImJ1aWxkU2libGluZ05vZGUiLCIkbm9kZUNoYXJ0IiwibmV3U2libGluZ0NvdW50IiwiaW5zZXJ0UG9zdGlvbiIsImZsb29yIiwiY2hpbGRDb3VudCIsIiRzaWJsaW5nVGRzIiwidW53cmFwIiwibm9kZUNvdW50IiwicmVtb3ZlTm9kZXMiLCIkbWFzayIsInNvdXJjZUNoYXJ0IiwiaHRtbDJjYW52YXMiLCJ3aWR0aCIsImNsaWVudEhlaWdodCIsImNsaWVudFdpZHRoIiwiaGVpZ2h0Iiwib25jbG9uZSIsImNsb25lRG9jIiwib25yZW5kZXJlZCIsImNhbnZhcyIsImRvYyIsImRvY1dpZHRoIiwiZG9jSGVpZ2h0IiwianNQREYiLCJhZGRJbWFnZSIsInRvRGF0YVVSTCIsInNhdmUiLCJpc1dlYmtpdCIsImRvY3VtZW50RWxlbWVudCIsImlzRmYiLCJzaWRlYmFyIiwiaXNFZGdlIiwiYXBwTmFtZSIsImFwcFZlcnNpb24iLCJtc1NhdmVCbG9iIiwibXNUb0Jsb2IiLCJzZWxlY3RvciIsInRoZW4iLCJmbiIsIm9yZ2NoYXJ0Il0sIm1hcHBpbmdzIjoiQUFVQSxjQUVDLFNBQVVBLEdBQ2EsaUJBQVhDLFFBQWlELGlCQUFuQkEsT0FBT0MsUUFDOUNGLEVBQVFHLFFBQVEsVUFBV0MsT0FBUUMsVUFFbkNMLEVBQVFNLE9BQVFGLE9BQVFDLFVBSjVCLENBTUUsU0FBVUUsRUFBR0gsRUFBUUMsRUFBVUcsR0FDL0IsSUFBSUMs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UWQsV0FBYSxJQUFNLGVBQ3pHRSxFQUFpQixjQUV2Q1IsRUFBZ0IrQixLQUFLdVUsR0FBVTVKLEtBQUssT0FBUTJJLEVBQU9NLGFBQWEsR0FBR2pVLGFBSzFFNlUsS0FBSyxXQUNKdlcsRUFBZ0JnQyxZQUFZLG9CQUMzQixXQUNEaEMsRUFBZ0JnQyxZQUFZLHVCQUtsQ3RDLEVBQUU4VyxHQUFHQyxTQUFXLFNBQVUzVyxHQUN4QixPQUFPLElBQUlGLEVBQVNHLEtBQU1ELEdBQU1vQiIsImZpbGUiOiJqcXVlcnkub3JnY2hhcnQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIGpRdWVyeSBPcmdDaGFydCBQbHVnaW5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9kYWJlbmcvT3JnQ2hhcnRcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNiwgZGFiZW5nXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZGFiZW5nXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuICogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpLCB3aW5kb3csIGRvY3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBmYWN0b3J5KGpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG4gIH1cbn0oZnVuY3Rpb24gKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuICB2YXIgT3JnQ2hhcnQgPSBmdW5jdGlvbiAoZWxlbSwgb3B0cykge1xuICAgIHRoaXMuJGNoYXJ0Q29udGFpbmVyID0gJChlbGVtKTtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAnbm9kZVRpdGxlJzogJ25hbWUnLFxuICAgICAgJ25vZGVJZCc6ICdpZCcsXG4gICAgICAndG9nZ2xlU2libGluZ3NSZXNwJzogZmFsc2UsXG4gICAgICAnZGVwdGgnOiA5OTksXG4gICAgICAnY2hhcnRDbGFzcyc6ICcnLFxuICAgICAgJ2V4cG9ydEJ1dHRvbic6IGZhbHNlLFxuICAgICAgJ2V4cG9ydEZpbGVuYW1lJzogJ09yZ0NoYXJ0JyxcbiAgICAgICdleHBvcnRGaWxlZXh0ZW5zaW9uJzogJ3BuZycsXG4gICAgICAncGFyZW50Tm9kZVN5bWJvbCc6ICdmYS11c2VycycsXG4gICAgICAnZHJhZ2dhYmxlJzogZmFsc2UsXG4gICAgICAnZGlyZWN0aW9uJzogJ3QyYicsXG4gICAgICAncGFuJzogZmFsc2UsXG4gICAgICAnem9vbSc6IGZhbHNlLFxuICAgICAgJ3pvb21pbkxpbWl0JzogNyxcbiAgICAgICd6b29tb3V0TGltaXQnOiAwLjVcbiAgICB9O1xuICB9O1xuICAvL1xuICBPcmdDaGFydC5wcm90b3R5cGUgPSB7XG4gICAgLy9cbiAgICBpbml0OiBmdW5jdGlvbiAob3B0cykge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuZGVmYXVsdE9wdGlvbnMsIHRoaXMub3B0cywgb3B0cyk7XG4gICAgICAvLyBidWlsZCB0aGUgb3JnLWNoYXJ0XG4gICAgICB2YXIgJGNoYXJ0Q29udGFpbmVyID0gdGhpcy4kY2hhcnRDb250YWluZXI7XG4gICAgICBpZiAodGhpcy4kY2hhcnQpIHtcbiAgICAgICAgdGhpcy4kY2hhcnQucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IHRoaXMub3B0aW9ucy5kYXRhO1xuICAgICAgdmFyICRjaGFydCA9IHRoaXMuJGNoYXJ0ID0gJCgnPGRpdj4nLCB7XG4gICAgICAgICdkYXRhJzogeyAnb3B0aW9ucyc6IHRoaXMub3B0aW9ucyB9LFxuICAgICAgICAnY2xhc3MnOiAnb3JnY2hhcnQnICsgKHRoaXMub3B0aW9ucy5jaGFydENsYXNzICE9PSAnJyA/ICcgJyArIHRoaXMub3B0aW9ucy5jaGFydENsYXNzIDogJycpICsgKHRoaXMub3B0aW9ucy5kaXJlY3Rpb24gIT09ICd0MmInID8gJyAnICsgdGhpcy5vcHRpb25zLmRpcmVjdGlvbiA6ICcnKSxcbiAgICAgICAgJ2NsaWNrJzogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICBpZiAoISQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KCcubm9kZScpLmxlbmd0aCkge1xuICAgICAgICAgICAgJGNoYXJ0LmZpbmQoJy5ub2RlLmZvY3VzZWQnKS5yZW1vdmVDbGFzcygnZm9jdXNlZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlckluaXRFdmVudCgpO1xuICAgICAgfVxuICAgICAgaWYgKCQudHlwZShkYXRhKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkKSB7IC8vIHVsIGRhdGFzb3VyY2VcbiAgICAgICAgICB0aGlzLmJ1aWxkSGllcmFyY2h5KCRjaGFydCwgdGhpcy5idWlsZEpzb25EUyhkYXRhLmNoaWxkcmVuKCkpLCAwLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9IGVsc2UgeyAvLyBsb2NhbCBqc29uIGRhdGFzb3VyY2VcbiAgICAgICAgICB0aGlzLmJ1aWxkSGllcmFyY2h5KCRjaGFydCwgdGhpcy5vcHRpb25zLmFqYXhVUkwgPyBkYXRhIDogdGhpcy5hdHRhY2hSZWwoZGF0YSwgJzAwJyksIDAsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRjaGFydC5hcHBlbmQoJzxpIGNsYXNzPVwiZmEgZmEtY2lyY2xlLW8tbm90Y2ggZmEtc3BpbiBzcGlubmVyXCI+PC9pPicpO1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICd1cmwnOiBkYXRhLFxuICAgICAgICAgICdkYXRhVHlwZSc6ICdqc29uJ1xuICAgICAgICB9KVxuICAgICAgICAuZG9uZShmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikge1xuICAgICAgICAgIHRoYXQuYnVpbGRIaWVyYXJjaHkoJGNoYXJ0LCB0aGF0Lm9wdGlvbnMuYWpheFVSTCA/IGRhdGEgOiB0aGF0LmF0dGFjaFJlbChkYXRhLCAnMDAnKSwgMCwgdGhhdC5vcHRpb25zKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmZhaWwoZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyb3JUaHJvd24pO1xuICAgICAgICB9KVxuICAgICAgICAuYWx3YXlzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRjaGFydC5jaGlsZHJlbignLnNwaW5uZXInKS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAkY2hhcnRDb250YWluZXIuYXBwZW5kKCRjaGFydCk7XG5cbiAgICAgIC8vIGFwcGVuZCB0aGUgZXhwb3J0IGJ1dHRvblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHBvcnRCdXR0b24gJiYgISRjaGFydENvbnRhaW5lci5maW5kKCcub2MtZXhwb3J0LWJ0bicpLmxlbmd0aCkge1xuICAgICAgICB2YXIgJGV4cG9ydEJ0biA9ICQoJzxidXR0b24+Jywge1xuICAgICAgICAgICdjbGFzcyc6ICdvYy1leHBvcnQtYnRuJyArICh0aGlzLm9wdGlvbnMuY2hhcnRDbGFzcyAhPT0gJycgPyAnICcgKyB0aGlzLm9wdGlvbnMuY2hhcnRDbGFzcyA6ICcnKSxcbiAgICAgICAgICAndGV4dCc6ICdFeHBvcnQnLFxuICAgICAgICAgICdjbGljayc6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoYXQuZXhwb3J0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgJGNoYXJ0Q29udGFpbmVyLmFwcGVuZCgkZXhwb3J0QnRuKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYW4pIHtcbiAgICAgICAgdGhpcy5iaW5kUGFuKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuem9vbSkge1xuICAgICAgICB0aGlzLmJpbmRab29tKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLy9cbiAgICB0cmlnZ2VySW5pdEV2ZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIgbW8gPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7XG4gICAgICAgIG1vLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgaW5pdFRpbWU6XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXV0YXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtdXRhdGlvbnNbaV0uYWRkZWROb2Rlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKG11dGF0aW9uc1tpXS5hZGRlZE5vZGVzW2pdLmNsYXNzTGlzdC5jb250YWlucygnb3JnY2hhcnQnKSkge1xuICAgICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLmluaXRDb21wbGV0ZWQgJiYgdHlwZW9mIHRoYXQub3B0aW9ucy5pbml0Q29tcGxldGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5vcHRpb25zLmluaXRDb21wbGV0ZWQodGhhdC4kY2hhcnQpO1xuICAgICAgICAgICAgICAgIHZhciBpbml0RXZlbnQgPSAkLkV2ZW50KCdpbml0Lm9yZ2NoYXJ0Jyk7XG4gICAgICAgICAgICAgICAgJGNoYXJ0LnRyaWdnZXIoaW5pdEV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhayBpbml0VGltZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBtby5vYnNlcnZlKHRoaXMuJGNoYXJ0Q29udGFpbmVyWzBdLCB7IGNoaWxkTGlzdDogdHJ1ZSB9KTtcbiAgICB9LFxuICAgIC8vXG4gICAgc2V0T3B0aW9uczogZnVuY3Rpb24gKG9wdHMsIHZhbCkge1xuICAgICAgaWYgKHR5cGVvZiBvcHRzID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAob3B0cyA9PT0gJ3BhbicpIHtcbiAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRQYW4oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51bmJpbmRQYW4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMgPT09ICd6b29tJykge1xuICAgICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZFpvb20oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51bmJpbmRab29tKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG9wdHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChvcHRzLmRhdGEpIHtcbiAgICAgICAgICB0aGlzLmluaXQob3B0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvcHRzLnBhbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLnBhbikge1xuICAgICAgICAgICAgICB0aGlzLmJpbmRQYW4oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMudW5iaW5kUGFuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2Ygb3B0cy56b29tICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKG9wdHMuem9vbSkge1xuICAgICAgICAgICAgICB0aGlzLmJpbmRab29tKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnVuYmluZFpvb20oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICAvL1xuICAgIHBhblN0YXJ0SGFuZGxlcjogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciAkY2hhcnQgPSAkKGUuZGVsZWdhdGVUYXJnZXQpO1xuICAgICAgaWYgKCQoZS50YXJnZXQpLmNsb3Nlc3QoJy5ub2RlJykubGVuZ3RoIHx8IChlLnRvdWNoZXMgJiYgZS50b3VjaGVzLmxlbmd0aCA+IDEpKSB7XG4gICAgICAgICRjaGFydC5kYXRhKCdwYW5uaW5nJywgZmFsc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkY2hhcnQuY3NzKCdjdXJzb3InLCAnbW92ZScpLmRhdGEoJ3Bhbm5pbmcnLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0WCA9IDA7XG4gICAgICB2YXIgbGFzdFkgPSAwO1xuICAgICAgdmFyIGxhc3RUZiA9ICRjaGFydC5jc3MoJ3RyYW5zZm9ybScpO1xuICAgICAgaWYgKGxhc3RUZiAhPT0gJ25vbmUnKSB7XG4gICAgICAgIHZhciB0ZW1wID0gbGFzdFRmLnNwbGl0KCcsJyk7XG4gICAgICAgIGlmIChsYXN0VGYuaW5kZXhPZignM2QnKSA9PT0gLTEpIHtcbiAgICAgICAgICBsYXN0WCA9IHBhcnNlSW50KHRlbXBbNF0pO1xuICAgICAgICAgIGxhc3RZID0gcGFyc2VJbnQodGVtcFs1XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdFggPSBwYXJzZUludCh0ZW1wWzEyXSk7XG4gICAgICAgICAgbGFzdFkgPSBwYXJzZUludCh0ZW1wWzEzXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBzdGFydFggPSAwO1xuICAgICAgdmFyIHN0YXJ0WSA9IDA7XG4gICAgICBpZiAoIWUudGFyZ2V0VG91Y2hlcykgeyAvLyBwYW5kIG9uIGRlc2t0b3BcbiAgICAgICAgc3RhcnRYID0gZS5wYWdlWCAtIGxhc3RYO1xuICAgICAgICBzdGFydFkgPSBlLnBhZ2VZIC0gbGFzdFk7XG4gICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHsgLy8gcGFuIG9uIG1vYmlsZSBkZXZpY2VcbiAgICAgICAgc3RhcnRYID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIC0gbGFzdFg7XG4gICAgICAgIHN0YXJ0WSA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSAtIGxhc3RZO1xuICAgICAgfSBlbHNlIGlmIChlLnRhcmdldFRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkY2hhcnQub24oJ21vdXNlbW92ZSB0b3VjaG1vdmUnLGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKCEkY2hhcnQuZGF0YSgncGFubmluZycpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXdYID0gMDtcbiAgICAgICAgdmFyIG5ld1kgPSAwO1xuICAgICAgICBpZiAoIWUudGFyZ2V0VG91Y2hlcykgeyAvLyBwYW5kIG9uIGRlc2t0b3BcbiAgICAgICAgICBuZXdYID0gZS5wYWdlWCAtIHN0YXJ0WDtcbiAgICAgICAgICBuZXdZID0gZS5wYWdlWSAtIHN0YXJ0WTtcbiAgICAgICAgfSBlbHNlIGlmIChlLnRhcmdldFRvdWNoZXMubGVuZ3RoID09PSAxKSB7IC8vIHBhbiBvbiBtb2JpbGUgZGV2aWNlXG4gICAgICAgICAgbmV3WCA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCAtIHN0YXJ0WDtcbiAgICAgICAgICBuZXdZID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIC0gc3RhcnRZO1xuICAgICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsYXN0VGYgPSAkY2hhcnQuY3NzKCd0cmFuc2Zvcm0nKTtcbiAgICAgICAgaWYgKGxhc3RUZiA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgaWYgKGxhc3RUZi5pbmRleE9mKCczZCcpID09PSAtMSkge1xuICAgICAgICAgICAgJGNoYXJ0LmNzcygndHJhbnNmb3JtJywgJ21hdHJpeCgxLCAwLCAwLCAxLCAnICsgbmV3WCArICcsICcgKyBuZXdZICsgJyknKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGNoYXJ0LmNzcygndHJhbnNmb3JtJywgJ21hdHJpeDNkKDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEsIDAsICcgKyBuZXdYICsgJywgJyArIG5ld1kgKyAnLCAwLCAxKScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgbWF0cml4ID0gbGFzdFRmLnNwbGl0KCcsJyk7XG4gICAgICAgICAgaWYgKGxhc3RUZi5pbmRleE9mKCczZCcpID09PSAtMSkge1xuICAgICAgICAgICAgbWF0cml4WzRdID0gJyAnICsgbmV3WDtcbiAgICAgICAgICAgIG1hdHJpeFs1XSA9ICcgJyArIG5ld1kgKyAnKSc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1hdHJpeFsxMl0gPSAnICcgKyBuZXdYO1xuICAgICAgICAgICAgbWF0cml4WzEzXSA9ICcgJyArIG5ld1k7XG4gICAgICAgICAgfVxuICAgICAgICAgICRjaGFydC5jc3MoJ3RyYW5zZm9ybScsIG1hdHJpeC5qb2luKCcsJykpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIC8vXG4gICAgcGFuRW5kSGFuZGxlcjogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLmRhdGEuY2hhcnQuZGF0YSgncGFubmluZycpKSB7XG4gICAgICAgIGUuZGF0YS5jaGFydC5kYXRhKCdwYW5uaW5nJywgZmFsc2UpLmNzcygnY3Vyc29yJywgJ2RlZmF1bHQnKS5vZmYoJ21vdXNlbW92ZScpO1xuICAgICAgfVxuICAgIH0sXG4gICAgLy9cbiAgICBiaW5kUGFuOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRjaGFydENvbnRhaW5lci5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpO1xuICAgICAgdGhpcy4kY2hhcnQub24oJ21vdXNlZG93biB0b3VjaHN0YXJ0JywgdGhpcy5wYW5TdGFydEhhbmRsZXIpO1xuICAgICAgJChkb2N1bWVudCkub24oJ21vdXNldXAgdG91Y2hlbmQnLCB7ICdjaGFydCc6IHRoaXMuJGNoYXJ0IH0sIHRoaXMucGFuRW5kSGFuZGxlcik7XG4gICAgfSxcbiAgICAvL1xuICAgIHVuYmluZFBhbjogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy4kY2hhcnRDb250YWluZXIuY3NzKCdvdmVyZmxvdycsICdhdXRvJyk7XG4gICAgICB0aGlzLiRjaGFydC5vZmYoJ21vdXNlZG93biB0b3VjaHN0YXJ0JywgdGhpcy5wYW5TdGFydEhhbmRsZXIpO1xuICAgICAgJChkb2N1bWVudCkub2ZmKCdtb3VzZXVwIHRvdWNoZW5kJywgdGhpcy5wYW5FbmRIYW5kbGVyKTtcbiAgICB9LFxuICAgIC8vXG4gICAgem9vbVdoZWVsSGFuZGxlcjogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBvYyA9IGUuZGF0YS5vYztcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHZhciBuZXdTY2FsZSAgPSAxICsgKGUub3JpZ2luYWxFdmVudC5kZWx0YVkgPiAwID8gLTAuMiA6IDAuMik7XG4gICAgICBvYy5zZXRDaGFydFNjYWxlKG9jLiRjaGFydCwgbmV3U2NhbGUpO1xuICAgIH0sXG4gICAgLy9cbiAgICB6b29tU3RhcnRIYW5kbGVyOiBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYoZS50b3VjaGVzICYmIGUudG91Y2hlcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgdmFyIG9jID0gZS5kYXRhLm9jO1xuICAgICAgICBvYy4kY2hhcnQuZGF0YSgncGluY2hpbmcnLCB0cnVlKTtcbiAgICAgICAgdmFyIGRpc3QgPSBvYy5nZXRQaW5jaERpc3QoZSk7XG4gICAgICAgIG9jLiRjaGFydC5kYXRhKCdwaW5jaERpc3RTdGFydCcsIGRpc3QpO1xuICAgICAgfVxuICAgIH0sXG4gICAgem9vbWluZ0hhbmRsZXI6IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgb2MgPSBlLmRhdGEub2M7XG4gICAgICBpZihvYy4kY2hhcnQuZGF0YSgncGluY2hpbmcnKSkge1xuICAgICAgICB2YXIgZGlzdCA9IG9jLmdldFBpbmNoRGlzdChlKTtcbiAgICAgICAgb2MuJGNoYXJ0LmRhdGEoJ3BpbmNoRGlzdEVuZCcsIGRpc3QpO1xuICAgICAgfVxuICAgIH0sXG4gICAgem9vbUVuZEhhbmRsZXI6IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgb2MgPSBlLmRhdGEub2M7XG4gICAgICBpZihvYy4kY2hhcnQuZGF0YSgncGluY2hpbmcnKSkge1xuICAgICAgICBvYy4kY2hhcnQuZGF0YSgncGluY2hpbmcnLCBmYWxzZSk7XG4gICAgICAgIHZhciBkaWZmID0gb2MuJGNoYXJ0LmRhdGEoJ3BpbmNoRGlzdEVuZCcpIC0gb2MuJGNoYXJ0LmRhdGEoJ3BpbmNoRGlzdFN0YXJ0Jyk7XG4gICAgICAgIGlmIChkaWZmID4gMCkge1xuICAgICAgICAgIG9jLnNldENoYXJ0U2NhbGUob2MuJGNoYXJ0LCAxLjIpO1xuICAgICAgICB9IGVsc2UgaWYgKGRpZmYgPCAwKSB7XG4gICAgICAgICAgb2Muc2V0Q2hhcnRTY2FsZShvYy4kY2hhcnQsIDAuOCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIC8vXG4gICAgYmluZFpvb206IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJGNoYXJ0Q29udGFpbmVyLm9uKCd3aGVlbCcsIHsgJ29jJzogdGhpcyB9LCB0aGlzLnpvb21XaGVlbEhhbmRsZXIpO1xuICAgICAgdGhpcy4kY2hhcnRDb250YWluZXIub24oJ3RvdWNoc3RhcnQnLCB7ICdvYyc6IHRoaXMgfSwgdGhpcy56b29tU3RhcnRIYW5kbGVyKTtcbiAgICAgICQoZG9jdW1lbnQpLm9uKCd0b3VjaG1vdmUnLCB7ICdvYyc6IHRoaXMgfSwgdGhpcy56b29taW5nSGFuZGxlcik7XG4gICAgICAkKGRvY3VtZW50KS5vbigndG91Y2hlbmQnLCB7ICdvYyc6IHRoaXMgfSwgdGhpcy56b29tRW5kSGFuZGxlcik7XG4gICAgfSxcbiAgICB1bmJpbmRab29tOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRjaGFydENvbnRhaW5lci5vZmYoJ3doZWVsJywgdGhpcy56b29tV2hlZWxIYW5kbGVyKTtcbiAgICAgIHRoaXMuJGNoYXJ0Q29udGFpbmVyLm9mZigndG91Y2hzdGFydCcsIHRoaXMuem9vbVN0YXJ0SGFuZGxlcik7XG4gICAgICAkKGRvY3VtZW50KS5vZmYoJ3RvdWNobW92ZScsIHRoaXMuem9vbWluZ0hhbmRsZXIpO1xuICAgICAgJChkb2N1bWVudCkub2ZmKCd0b3VjaGVuZCcsIHRoaXMuem9vbUVuZEhhbmRsZXIpO1xuICAgIH0sXG4gICAgLy9cbiAgICBnZXRQaW5jaERpc3Q6IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KChlLnRvdWNoZXNbMF0uY2xpZW50WCAtIGUudG91Y2hlc1sxXS5jbGllbnRYKSAqIChlLnRvdWNoZXNbMF0uY2xpZW50WCAtIGUudG91Y2hlc1sxXS5jbGllbnRYKSArXG4gICAgICAoZS50b3VjaGVzWzBdLmNsaWVudFkgLSBlLnRvdWNoZXNbMV0uY2xpZW50WSkgKiAoZS50b3VjaGVzWzBdLmNsaWVudFkgLSBlLnRvdWNoZXNbMV0uY2xpZW50WSkpO1xuICAgIH0sXG4gICAgLy9cbiAgICBzZXRDaGFydFNjYWxlOiBmdW5jdGlvbiAoJGNoYXJ0LCBuZXdTY2FsZSkge1xuICAgICAgdmFyIG9wdHMgPSAkY2hhcnQuZGF0YSgnb3B0aW9ucycpO1xuICAgICAgdmFyIGxhc3RUZiA9ICRjaGFydC5jc3MoJ3RyYW5zZm9ybScpO1xuICAgICAgdmFyIG1hdHJpeCA9ICcnO1xuICAgICAgdmFyIHRhcmdldFNjYWxlID0gMTtcbiAgICAgIGlmIChsYXN0VGYgPT09ICdub25lJykge1xuICAgICAgICAkY2hhcnQuY3NzKCd0cmFuc2Zvcm0nLCAnc2NhbGUoJyArIG5ld1NjYWxlICsgJywnICsgbmV3U2NhbGUgKyAnKScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF0cml4ID0gbGFzdFRmLnNwbGl0KCcsJyk7XG4gICAgICAgIGlmIChsYXN0VGYuaW5kZXhPZignM2QnKSA9PT0gLTEpIHtcbiAgICAgICAgICB0YXJnZXRTY2FsZSA9IE1hdGguYWJzKHdpbmRvdy5wYXJzZUZsb2F0KG1hdHJpeFszXSkgKiBuZXdTY2FsZSk7XG4gICAgICAgICAgaWYgKHRhcmdldFNjYWxlID4gb3B0cy56b29tb3V0TGltaXQgJiYgdGFyZ2V0U2NhbGUgPCBvcHRzLnpvb21pbkxpbWl0KSB7XG4gICAgICAgICAgICAkY2hhcnQuY3NzKCd0cmFuc2Zvcm0nLCBsYXN0VGYgKyAnIHNjYWxlKCcgKyBuZXdTY2FsZSArICcsJyArIG5ld1NjYWxlICsgJyknKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0U2NhbGUgPSBNYXRoLmFicyh3aW5kb3cucGFyc2VGbG9hdChtYXRyaXhbMV0pICogbmV3U2NhbGUpO1xuICAgICAgICAgIGlmICh0YXJnZXRTY2FsZSA+IG9wdHMuem9vbW91dExpbWl0ICYmIHRhcmdldFNjYWxlIDwgb3B0cy56b29taW5MaW1pdCkge1xuICAgICAgICAgICAgJGNoYXJ0LmNzcygndHJhbnNmb3JtJywgbGFzdFRmICsgJyBzY2FsZTNkKCcgKyBuZXdTY2FsZSArICcsJyArIG5ld1NjYWxlICsgJywgMSknKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIC8vXG4gICAgYnVpbGRKc29uRFM6IGZ1bmN0aW9uICgkbGkpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBzdWJPYmogPSB7XG4gICAgICAgICduYW1lJzogJGxpLmNvbnRlbnRzKCkuZXEoMCkudGV4dCgpLnRyaW0oKSxcbiAgICAgICAgJ3JlbGF0aW9uc2hpcCc6ICgkbGkucGFyZW50KCkucGFyZW50KCkuaXMoJ2xpJykgPyAnMSc6ICcwJykgKyAoJGxpLnNpYmxpbmdzKCdsaScpLmxlbmd0aCA/IDE6IDApICsgKCRsaS5jaGlsZHJlbigndWwnKS5sZW5ndGggPyAxIDogMClcbiAgICAgIH07XG4gICAgICBpZiAoJGxpWzBdLmlkKSB7XG4gICAgICAgIHN1Yk9iai5pZCA9ICRsaVswXS5pZDtcbiAgICAgIH1cbiAgICAgICRsaS5jaGlsZHJlbigndWwnKS5jaGlsZHJlbigpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghc3ViT2JqLmNoaWxkcmVuKSB7IHN1Yk9iai5jaGlsZHJlbiA9IFtdOyB9XG4gICAgICAgIHN1Yk9iai5jaGlsZHJlbi5wdXNoKHRoYXQuYnVpbGRKc29uRFMoJCh0aGlzKSkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3ViT2JqO1xuICAgIH0sXG4gICAgLy9cbiAgICBhdHRhY2hSZWw6IGZ1bmN0aW9uIChkYXRhLCBmbGFncykge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgZGF0YS5yZWxhdGlvbnNoaXAgPSBmbGFncyArIChkYXRhLmNoaWxkcmVuICYmIGRhdGEuY2hpbGRyZW4ubGVuZ3RoID4gMCA/IDEgOiAwKTtcbiAgICAgIGlmIChkYXRhLmNoaWxkcmVuKSB7XG4gICAgICAgIGRhdGEuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgdGhhdC5hdHRhY2hSZWwoaXRlbSwgJzEnICsgKGRhdGEuY2hpbGRyZW4ubGVuZ3RoID4gMSA/IDEgOiAwKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSxcbiAgICAvL1xuICAgIGxvb3BDaGFydDogZnVuY3Rpb24gKCRjaGFydCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyICR0ciA9ICRjaGFydC5maW5kKCd0cjpmaXJzdCcpO1xuICAgICAgdmFyIHN1Yk9iaiA9IHsgJ2lkJzogJHRyLmZpbmQoJy5ub2RlJylbMF0uaWQgfTtcbiAgICAgICR0ci5zaWJsaW5ncygnOmxhc3QnKS5jaGlsZHJlbigpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghc3ViT2JqLmNoaWxkcmVuKSB7IHN1Yk9iai5jaGlsZHJlbiA9IFtdOyB9XG4gICAgICAgIHN1Yk9iai5jaGlsZHJlbi5wdXNoKHRoYXQubG9vcENoYXJ0KCQodGhpcykpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHN1Yk9iajtcbiAgICB9LFxuICAgIC8vXG4gICAgZ2V0SGllcmFyY2h5OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuJGNoYXJ0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gJ0Vycm9yOiBvcmdjaGFydCBkb2VzIG5vdCBleGlzdCdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpcy4kY2hhcnQuZmluZCgnLm5vZGUnKS5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gJ0Vycm9yOiBub2RlcyBkbyBub3QgZXhpc3QnXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCF0aGlzLiRjaGFydC5maW5kKCcubm9kZScpWzBdLmlkKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0Vycm9yOiBOb2RlcyBvZiBvcmdoY2FydCB0byBiZSBleHBvcnRlZCBtdXN0IGhhdmUgaWQgYXR0cmlidXRlISc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5sb29wQ2hhcnQodGhpcy4kY2hhcnQpO1xuICAgIH0sXG4gICAgLy8gZGV0ZWN0IHRoZSBleGlzdC9kaXNwbGF5IHN0YXRlIG9mIHJlbGF0ZWQgbm9kZVxuICAgIGdldE5vZGVTdGF0ZTogZnVuY3Rpb24gKCRub2RlLCByZWxhdGlvbikge1xuICAgICAgdmFyICR0YXJnZXQgPSB7fTtcbiAgICAgIHZhciByZWxhdGlvbiA9IHJlbGF0aW9uIHx8ICdzZWxmJztcbiAgICAgIGlmIChyZWxhdGlvbiA9PT0gJ3BhcmVudCcpIHtcbiAgICAgICAgJHRhcmdldCA9ICRub2RlLmNsb3Nlc3QoJy5ub2RlcycpLnNpYmxpbmdzKCc6Zmlyc3QnKTtcbiAgICAgICAgaWYgKCR0YXJnZXQubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKCR0YXJnZXQuaXMoJy5oaWRkZW4nKSB8fCAoISR0YXJnZXQuaXMoJy5oaWRkZW4nKSAmJiAkdGFyZ2V0LmNsb3Nlc3QoJy5ub2RlcycpLmlzKCcuaGlkZGVuJykpKSB7XG4gICAgICAgICAgICByZXR1cm4geyAnZXhpc3QnOiB0cnVlLCAndmlzaWJsZSc6IGZhbHNlIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7ICdleGlzdCc6IHRydWUsICd2aXNpYmxlJzogdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJlbGF0aW9uID09PSAnY2hpbGRyZW4nKSB7XG4gICAgICAgICR0YXJnZXQgPSAkbm9kZS5jbG9zZXN0KCd0cicpLnNpYmxpbmdzKCc6bGFzdCcpO1xuICAgICAgICBpZiAoJHRhcmdldC5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoISR0YXJnZXQuaXMoJy5oaWRkZW4nKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgJ2V4aXN0JzogdHJ1ZSwgJ3Zpc2libGUnOiB0cnVlIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7ICdleGlzdCc6IHRydWUsICd2aXNpYmxlJzogZmFsc2UgfTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZWxhdGlvbiA9PT0gJ3NpYmxpbmdzJykge1xuICAgICAgICAkdGFyZ2V0ID0gJG5vZGUuY2xvc2VzdCgndGFibGUnKS5wYXJlbnQoKS5zaWJsaW5ncygpO1xuICAgICAgICBpZiAoJHRhcmdldC5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoISR0YXJnZXQuaXMoJy5oaWRkZW4nKSAmJiAhJHRhcmdldC5wYXJlbnQoKS5pcygnLmhpZGRlbicpKSB7XG4gICAgICAgICAgICByZXR1cm4geyAnZXhpc3QnOiB0cnVlLCAndmlzaWJsZSc6IHRydWUgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHsgJ2V4aXN0JzogdHJ1ZSwgJ3Zpc2libGUnOiBmYWxzZSB9O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkdGFyZ2V0ID0gJG5vZGU7XG4gICAgICAgIGlmICgkdGFyZ2V0Lmxlbmd0aCkge1xuICAgICAgICAgIGlmICghKCgkdGFyZ2V0LmNsb3Nlc3QoJy5ub2RlcycpLmxlbmd0aCAmJiAkdGFyZ2V0LmNsb3Nlc3QoJy5ub2RlcycpLmlzKCcuaGlkZGVuJykpIHx8XG4gICAgICAgICAgICAoJHRhcmdldC5jbG9zZXN0KCd0YWJsZScpLnBhcmVudCgpLmxlbmd0aCAmJiAkdGFyZ2V0LmNsb3Nlc3QoJ3RhYmxlJykucGFyZW50KCkuaXMoJy5oaWRkZW4nKSkgfHxcbiAgICAgICAgICAgICgkdGFyZ2V0LnBhcmVudCgpLmlzKCdsaScpICYmICgkdGFyZ2V0LmNsb3Nlc3QoJ3VsJykuaXMoJy5oaWRkZW4nKSB8fCAkdGFyZ2V0LmNsb3Nlc3QoJ3ZlcnRpY2FsTm9kZXMnKS5pcygnLmhpZGRlbicpKSlcbiAgICAgICAgICApKSB7XG4gICAgICAgICAgICByZXR1cm4geyAnZXhpc3QnOiB0cnVlLCAndmlzaWJsZSc6IHRydWUgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHsgJ2V4aXN0JzogdHJ1ZSwgJ3Zpc2libGUnOiBmYWxzZSB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyAnZXhpc3QnOiBmYWxzZSwgJ3Zpc2libGUnOiBmYWxzZSB9O1xuICAgIH0sXG4gICAgLy8gZmluZCB0aGUgcmVsYXRlZCBub2Rlc1xuICAgIGdldFJlbGF0ZWROb2RlczogZnVuY3Rpb24gKCRub2RlLCByZWxhdGlvbikge1xuICAgICAgaWYgKCEkbm9kZSB8fCAhKCRub2RlIGluc3RhbmNlb2YgJCkgfHwgISRub2RlLmlzKCcubm9kZScpKSB7XG4gICAgICAgIHJldHVybiAkKCk7XG4gICAgICB9XG4gICAgICBpZiAocmVsYXRpb24gPT09ICdwYXJlbnQnKSB7XG4gICAgICAgIHJldHVybiAkbm9kZS5jbG9zZXN0KCcubm9kZXMnKS5wYXJlbnQoKS5jaGlsZHJlbignOmZpcnN0JykuZmluZCgnLm5vZGUnKTtcbiAgICAgIH0gZWxzZSBpZiAocmVsYXRpb24gPT09ICdjaGlsZHJlbicpIHtcbiAgICAgICAgcmV0dXJuICRub2RlLmNsb3Nlc3QoJ3RyJykuc2libGluZ3MoJy5ub2RlcycpLmNoaWxkcmVuKCkuZmluZCgnLm5vZGU6Zmlyc3QnKTtcbiAgICAgIH0gZWxzZSBpZiAocmVsYXRpb24gPT09ICdzaWJsaW5ncycpIHtcbiAgICAgICAgcmV0dXJuICRub2RlLmNsb3Nlc3QoJ3RhYmxlJykucGFyZW50KCkuc2libGluZ3MoKS5maW5kKCcubm9kZTpmaXJzdCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGhpZGVQYXJlbnRFbmQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgJChldmVudC50YXJnZXQpLnJlbW92ZUNsYXNzKCdzbGlkaW5nJyk7XG4gICAgICBldmVudC5kYXRhLnVwcGVyTGV2ZWwuYWRkQ2xhc3MoJ2hpZGRlbicpLnNsaWNlKDEpLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgfSxcbiAgICAvLyByZWN1cnNpdmVseSBoaWRlIHRoZSBhbmNlc3RvciBub2RlIGFuZCBzaWJsaW5nIG5vZGVzIG9mIHRoZSBzcGVjaWZpZWQgbm9kZVxuICAgIGhpZGVQYXJlbnQ6IGZ1bmN0aW9uICgkbm9kZSkge1xuICAgICAgdmFyICR1cHBlckxldmVsID0gJG5vZGUuY2xvc2VzdCgnLm5vZGVzJykuc2libGluZ3MoKTtcbiAgICAgIGlmICgkdXBwZXJMZXZlbC5lcSgwKS5maW5kKCcuc3Bpbm5lcicpLmxlbmd0aCkge1xuICAgICAgICAkbm9kZS5jbG9zZXN0KCcub3JnY2hhcnQnKS5kYXRhKCdpbkFqYXgnLCBmYWxzZSk7XG4gICAgICB9XG4gICAgICAvLyBoaWRlIHRoZSBzaWJsaW5nIG5vZGVzXG4gICAgICBpZiAodGhpcy5nZXROb2RlU3RhdGUoJG5vZGUsICdzaWJsaW5ncycpLnZpc2libGUpIHtcbiAgICAgICAgdGhpcy5oaWRlU2libGluZ3MoJG5vZGUpO1xuICAgICAgfVxuICAgICAgLy8gaGlkZSB0aGUgbGluZXNcbiAgICAgIHZhciAkbGluZXMgPSAkdXBwZXJMZXZlbC5zbGljZSgxKTtcbiAgICAgICRsaW5lcy5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG4gICAgICAvLyBoaWRlIHRoZSBzdXBlcmlvciBub2RlcyB3aXRoIHRyYW5zaXRpb25cbiAgICAgIHZhciAkcGFyZW50ID0gJHVwcGVyTGV2ZWwuZXEoMCkuZmluZCgnLm5vZGUnKTtcbiAgICAgIGlmICh0aGlzLmdldE5vZGVTdGF0ZSgkcGFyZW50KS52aXNpYmxlKSB7XG4gICAgICAgICRwYXJlbnQuYWRkQ2xhc3MoJ3NsaWRpbmcgc2xpZGUtZG93bicpLm9uZSgndHJhbnNpdGlvbmVuZCcsIHsgJ3VwcGVyTGV2ZWwnOiAkdXBwZXJMZXZlbCB9LCB0aGlzLmhpZGVQYXJlbnRFbmQpO1xuICAgICAgfVxuICAgICAgLy8gaWYgdGhlIGN1cnJlbnQgbm9kZSBoYXMgdGhlIHBhcmVudCBub2RlLCBoaWRlIGl0IHJlY3Vyc2l2ZWx5XG4gICAgICBpZiAodGhpcy5nZXROb2RlU3RhdGUoJHBhcmVudCwgJ3BhcmVudCcpLnZpc2libGUpIHtcbiAgICAgICAgdGhpcy5oaWRlUGFyZW50KCRwYXJlbnQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2hvd1BhcmVudEVuZDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgJG5vZGUgPSBldmVudC5kYXRhLm5vZGU7XG4gICAgICAkKGV2ZW50LnRhcmdldCkucmVtb3ZlQ2xhc3MoJ3NsaWRpbmcnKTtcbiAgICAgIGlmICh0aGlzLmlzSW5BY3Rpb24oJG5vZGUpKSB7XG4gICAgICAgIHRoaXMuc3dpdGNoVmVydGljYWxBcnJvdygkbm9kZS5jaGlsZHJlbignLnRvcEVkZ2UnKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBzaG93IHRoZSBwYXJlbnQgbm9kZSBvZiB0aGUgc3BlY2lmaWVkIG5vZGVcbiAgICBzaG93UGFyZW50OiBmdW5jdGlvbiAoJG5vZGUpIHtcbiAgICAgIC8vIGp1c3Qgc2hvdyBvbmx5IG9uZSBzdXBlcmlvciBsZXZlbFxuICAgICAgdmFyICR1cHBlckxldmVsID0gJG5vZGUuY2xvc2VzdCgnLm5vZGVzJykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAvLyBqdXN0IHNob3cgb25seSBvbmUgbGluZVxuICAgICAgJHVwcGVyTGV2ZWwuZXEoMikuY2hpbGRyZW4oKS5zbGljZSgxLCAtMSkuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgLy8gc2hvdyBwYXJlbnQgbm9kZSB3aXRoIGFuaW1hdGlvblxuICAgICAgdmFyICRwYXJlbnQgPSAkdXBwZXJMZXZlbC5lcSgwKS5maW5kKCcubm9kZScpO1xuICAgICAgdGhpcy5yZXBhaW50KCRwYXJlbnRbMF0pO1xuICAgICAgJHBhcmVudC5hZGRDbGFzcygnc2xpZGluZycpLnJlbW92ZUNsYXNzKCdzbGlkZS1kb3duJykub25lKCd0cmFuc2l0aW9uZW5kJywgeyAnbm9kZSc6ICRub2RlIH0sIHRoaXMuc2hvd1BhcmVudEVuZC5iaW5kKHRoaXMpKTtcbiAgICB9LFxuICAgIHN0b3BBamF4OiBmdW5jdGlvbiAoJG5vZGVMZXZlbCkge1xuICAgICAgaWYgKCRub2RlTGV2ZWwuZmluZCgnLnNwaW5uZXInKS5sZW5ndGgpIHtcbiAgICAgICAgJG5vZGVMZXZlbC5jbG9zZXN0KCcub3JnY2hhcnQnKS5kYXRhKCdpbkFqYXgnLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpc1Zpc2libGVOb2RlOiBmdW5jdGlvbiAoaW5kZXgsIGVsZW0pIHtcbiAgICAgIHJldHVybiB0aGlzLmdldE5vZGVTdGF0ZSgkKGVsZW0pKS52aXNpYmxlO1xuICAgIH0sXG4gICAgLy9cbiAgICBoaWRlQ2hpbGRyZW5FbmQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQuZGF0YS52aXNpYmxlTm9kZXMucmVtb3ZlQ2xhc3MoJ3NsaWRpbmcnKTtcbiAgICAgIGlmIChldmVudC5kYXRhLmlzVmVydGljYWxEZXNjKSB7XG4gICAgICAgIGV2ZW50LmRhdGEubG93ZXJMZXZlbC5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldmVudC5kYXRhLnZpc2libGVOb2Rlcy5jbG9zZXN0KCd0YWJsZScpLmNsb3Nlc3QoJ3RyJykucHJldkFsbCgnLmxpbmVzJykucmVtb3ZlQXR0cignc3R5bGUnKS5hZGRDbGFzcygnaGlkZGVuJylcbiAgICAgICAgICAuc2libGluZ3MoJy5ub2RlcycpLmFkZENsYXNzKCdoaWRkZW4nKTtcbiAgICAgICAgZXZlbnQuZGF0YS5sb3dlckxldmVsLmxhc3QoKS5maW5kKCcudmVydGljYWxOb2RlcycpLmFkZENsYXNzKCdoaWRkZW4nKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlzSW5BY3Rpb24oZXZlbnQuZGF0YS5ub2RlKSkge1xuICAgICAgICB0aGlzLnN3aXRjaFZlcnRpY2FsQXJyb3coZXZlbnQuZGF0YS5ub2RlLmNoaWxkcmVuKCcuYm90dG9tRWRnZScpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIHJlY3Vyc2l2ZWx5IGhpZGUgdGhlIGRlc2NlbmRhbnQgbm9kZXMgb2YgdGhlIHNwZWNpZmllZCBub2RlXG4gICAgaGlkZUNoaWxkcmVuOiBmdW5jdGlvbiAoJG5vZGUpIHtcbiAgICAgIHZhciAkbG93ZXJMZXZlbCA9ICRub2RlLmNsb3Nlc3QoJ3RyJykuc2libGluZ3MoKTtcbiAgICAgIHRoaXMuc3RvcEFqYXgoJGxvd2VyTGV2ZWwubGFzdCgpKTtcbiAgICAgIHZhciAkdmlzaWJsZU5vZGVzID0gJGxvd2VyTGV2ZWwubGFzdCgpLmZpbmQoJy5ub2RlJykuZmlsdGVyKHRoaXMuaXNWaXNpYmxlTm9kZS5iaW5kKHRoaXMpKTtcbiAgICAgIHZhciBpc1ZlcnRpY2FsRGVzYyA9ICRsb3dlckxldmVsLmxhc3QoKS5pcygnLnZlcnRpY2FsTm9kZXMnKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgIGlmICghaXNWZXJ0aWNhbERlc2MpIHtcbiAgICAgICAgJHZpc2libGVOb2Rlcy5jbG9zZXN0KCd0YWJsZScpLmNsb3Nlc3QoJ3RyJykucHJldkFsbCgnLmxpbmVzJykuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuICAgICAgfVxuICAgICAgdGhpcy5yZXBhaW50KCR2aXNpYmxlTm9kZXMuZ2V0KDApKTtcbiAgICAgICR2aXNpYmxlTm9kZXMuYWRkQ2xhc3MoJ3NsaWRpbmcgc2xpZGUtdXAnKS5lcSgwKS5vbmUoJ3RyYW5zaXRpb25lbmQnLCB7ICd2aXNpYmxlTm9kZXMnOiAkdmlzaWJsZU5vZGVzLCAnbG93ZXJMZXZlbCc6ICRsb3dlckxldmVsLCAnaXNWZXJ0aWNhbERlc2MnOiBpc1ZlcnRpY2FsRGVzYywgJ25vZGUnOiAkbm9kZSB9LCB0aGlzLmhpZGVDaGlsZHJlbkVuZC5iaW5kKHRoaXMpKTtcbiAgICB9LFxuICAgIC8vIHNob3cgdGhlIGNoaWxkcmVuIG5vZGVzIG9mIHRoZSBzcGVjaWZpZWQgbm9kZVxuICAgIHNob3dDaGlsZHJlbjogZnVuY3Rpb24gKCRub2RlKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIgJGxldmVscyA9ICRub2RlLmNsb3Nlc3QoJ3RyJykuc2libGluZ3MoKTtcbiAgICAgIHZhciBpc1ZlcnRpY2FsRGVzYyA9ICRsZXZlbHMuaXMoJy52ZXJ0aWNhbE5vZGVzJykgPyB0cnVlIDogZmFsc2U7XG4gICAgICB2YXIgJGRlc2NlbmRhbnRzID0gaXNWZXJ0aWNhbERlc2NcbiAgICAgICAgPyAkbGV2ZWxzLnJlbW92ZUNsYXNzKCdoaWRkZW4nKS5maW5kKCcubm9kZScpLmZpbHRlcih0aGlzLmlzVmlzaWJsZU5vZGUuYmluZCh0aGlzKSlcbiAgICAgICAgOiAkbGV2ZWxzLnJlbW92ZUNsYXNzKCdoaWRkZW4nKS5lcSgyKS5jaGlsZHJlbigpLmZpbmQoJy5ub2RlOmZpcnN0JykuZmlsdGVyKHRoaXMuaXNWaXNpYmxlTm9kZS5iaW5kKHRoaXMpKTtcbiAgICAgIC8vIHRoZSB0d28gZm9sbG93aW5nIHN0YXRlbWVudHMgYXJlIHVzZWQgdG8gZW5mb3JjZSBicm93c2VyIHRvIHJlcGFpbnRcbiAgICAgIHRoaXMucmVwYWludCgkZGVzY2VuZGFudHMuZ2V0KDApKTtcbiAgICAgICRkZXNjZW5kYW50cy5hZGRDbGFzcygnc2xpZGluZycpLnJlbW92ZUNsYXNzKCdzbGlkZS11cCcpLmVxKDApLm9uZSgndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAkZGVzY2VuZGFudHMucmVtb3ZlQ2xhc3MoJ3NsaWRpbmcnKTtcbiAgICAgICAgaWYgKHRoYXQuaXNJbkFjdGlvbigkbm9kZSkpIHtcbiAgICAgICAgICB0aGF0LnN3aXRjaFZlcnRpY2FsQXJyb3coJG5vZGUuY2hpbGRyZW4oJy5ib3R0b21FZGdlJykpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIC8vXG4gICAgaGlkZVNpYmxpbmdzRW5kOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciAkbm9kZSA9IGV2ZW50LmRhdGEubm9kZTtcbiAgICAgIHZhciAkbm9kZUNvbnRhaW5lciA9IGV2ZW50LmRhdGEubm9kZUNvbnRhaW5lcjtcbiAgICAgIHZhciBkaXJlY3Rpb24gPSBldmVudC5kYXRhLmRpcmVjdGlvbjtcbiAgICAgIGV2ZW50LmRhdGEubGluZXMucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgIHZhciAkc2libGluZ3MgPSBkaXJlY3Rpb24gPyAoZGlyZWN0aW9uID09PSAnbGVmdCcgPyAkbm9kZUNvbnRhaW5lci5wcmV2QWxsKCc6bm90KC5oaWRkZW4pJykgOiAkbm9kZUNvbnRhaW5lci5uZXh0QWxsKCc6bm90KC5oaWRkZW4pJykpIDogJG5vZGVDb250YWluZXIuc2libGluZ3MoKTtcbiAgICAgICRub2RlQ29udGFpbmVyLmNsb3Nlc3QoJy5ub2RlcycpLnByZXYoKS5jaGlsZHJlbignOm5vdCguaGlkZGVuKScpXG4gICAgICAgIC5zbGljZSgxLCBkaXJlY3Rpb24gPyAkc2libGluZ3MubGVuZ3RoICogMiArIDEgOiAtMSkuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgZXZlbnQuZGF0YS5hbmltYXRlZE5vZGVzLnJlbW92ZUNsYXNzKCdzbGlkaW5nJyk7XG4gICAgICAkc2libGluZ3MuZmluZCgnLm5vZGU6Z3QoMCknKS5maWx0ZXIodGhpcy5pc1Zpc2libGVOb2RlLmJpbmQodGhpcykpXG4gICAgICAgIC5yZW1vdmVDbGFzcygnc2xpZGUtbGVmdCBzbGlkZS1yaWdodCcpLmFkZENsYXNzKCdzbGlkZS11cCcpO1xuICAgICAgJHNpYmxpbmdzLmZpbmQoJy5saW5lcywgLm5vZGVzLCAudmVydGljYWxOb2RlcycpLmFkZENsYXNzKCdoaWRkZW4nKVxuICAgICAgICAuZW5kKCkuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuXG4gICAgICBpZiAodGhpcy5pc0luQWN0aW9uKCRub2RlKSkge1xuICAgICAgICB0aGlzLnN3aXRjaEhvcml6b250YWxBcnJvdygkbm9kZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBoaWRlIHRoZSBzaWJsaW5nIG5vZGVzIG9mIHRoZSBzcGVjaWZpZWQgbm9kZVxuICAgIGhpZGVTaWJsaW5nczogZnVuY3Rpb24gKCRub2RlLCBkaXJlY3Rpb24pIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciAkbm9kZUNvbnRhaW5lciA9ICRub2RlLmNsb3Nlc3QoJ3RhYmxlJykucGFyZW50KCk7XG4gICAgICBpZiAoJG5vZGVDb250YWluZXIuc2libGluZ3MoKS5maW5kKCcuc3Bpbm5lcicpLmxlbmd0aCkge1xuICAgICAgICAkbm9kZS5jbG9zZXN0KCcub3JnY2hhcnQnKS5kYXRhKCdpbkFqYXgnLCBmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICRub2RlQ29udGFpbmVyLnByZXZBbGwoKS5maW5kKCcubm9kZScpLmZpbHRlcih0aGlzLmlzVmlzaWJsZU5vZGUuYmluZCh0aGlzKSkuYWRkQ2xhc3MoJ3NsaWRpbmcgc2xpZGUtcmlnaHQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkbm9kZUNvbnRhaW5lci5uZXh0QWxsKCkuZmluZCgnLm5vZGUnKS5maWx0ZXIodGhpcy5pc1Zpc2libGVOb2RlLmJpbmQodGhpcykpLmFkZENsYXNzKCdzbGlkaW5nIHNsaWRlLWxlZnQnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJG5vZGVDb250YWluZXIucHJldkFsbCgpLmZpbmQoJy5ub2RlJykuZmlsdGVyKHRoaXMuaXNWaXNpYmxlTm9kZS5iaW5kKHRoaXMpKS5hZGRDbGFzcygnc2xpZGluZyBzbGlkZS1yaWdodCcpO1xuICAgICAgICAkbm9kZUNvbnRhaW5lci5uZXh0QWxsKCkuZmluZCgnLm5vZGUnKS5maWx0ZXIodGhpcy5pc1Zpc2libGVOb2RlLmJpbmQodGhpcykpLmFkZENsYXNzKCdzbGlkaW5nIHNsaWRlLWxlZnQnKTtcbiAgICAgIH1cbiAgICAgIHZhciAkYW5pbWF0ZWROb2RlcyA9ICRub2RlQ29udGFpbmVyLnNpYmxpbmdzKCkuZmluZCgnLnNsaWRpbmcnKTtcbiAgICAgIHZhciAkbGluZXMgPSAkYW5pbWF0ZWROb2Rlcy5jbG9zZXN0KCcubm9kZXMnKS5wcmV2QWxsKCcubGluZXMnKS5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG4gICAgICAkYW5pbWF0ZWROb2Rlcy5lcSgwKS5vbmUoJ3RyYW5zaXRpb25lbmQnLCB7ICdub2RlJzogJG5vZGUsICdub2RlQ29udGFpbmVyJzogJG5vZGVDb250YWluZXIsICdkaXJlY3Rpb24nOiBkaXJlY3Rpb24sICdhbmltYXRlZE5vZGVzJzogJGFuaW1hdGVkTm9kZXMsICdsaW5lcyc6ICRsaW5lcyB9LCB0aGlzLmhpZGVTaWJsaW5nc0VuZC5iaW5kKHRoaXMpKTtcbiAgICB9LFxuICAgIC8vXG4gICAgc2hvd1NpYmxpbmdzRW5kOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciAkbm9kZSA9IGV2ZW50LmRhdGEubm9kZTtcbiAgICAgIGV2ZW50LmRhdGEudmlzaWJsZU5vZGVzLnJlbW92ZUNsYXNzKCdzbGlkaW5nJyk7XG4gICAgICBpZiAodGhpcy5pc0luQWN0aW9uKCRub2RlKSkge1xuICAgICAgICB0aGlzLnN3aXRjaEhvcml6b250YWxBcnJvdygkbm9kZSk7XG4gICAgICAgICRub2RlLmNoaWxkcmVuKCcudG9wRWRnZScpLnJlbW92ZUNsYXNzKCdmYS1jaGV2cm9uLXVwJykuYWRkQ2xhc3MoJ2ZhLWNoZXZyb24tZG93bicpO1xuICAgICAgfVxuICAgIH0sXG4gICAgLy8gc2hvdyB0aGUgc2libGluZyBub2RlcyBvZiB0aGUgc3BlY2lmaWVkIG5vZGVcbiAgICBzaG93U2libGluZ3M6IGZ1bmN0aW9uICgkbm9kZSwgZGlyZWN0aW9uKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAvLyBmaXJzdGx5LCBzaG93IHRoZSBzaWJsaW5nIHRkIHRhZ3NcbiAgICAgIHZhciAkc2libGluZ3MgPSAkKCk7XG4gICAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICRzaWJsaW5ncyA9ICRub2RlLmNsb3Nlc3QoJ3RhYmxlJykucGFyZW50KCkucHJldkFsbCgpLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkc2libGluZ3MgPSAkbm9kZS5jbG9zZXN0KCd0YWJsZScpLnBhcmVudCgpLm5leHRBbGwoKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRzaWJsaW5ncyA9ICRub2RlLmNsb3Nlc3QoJ3RhYmxlJykucGFyZW50KCkuc2libGluZ3MoKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICB9XG4gICAgICAvLyBzZWNvbmRseSwgc2hvdyB0aGUgbGluZXNcbiAgICAgIHZhciAkdXBwZXJMZXZlbCA9ICRub2RlLmNsb3Nlc3QoJ3RhYmxlJykuY2xvc2VzdCgndHInKS5zaWJsaW5ncygpO1xuICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAkdXBwZXJMZXZlbC5lcSgyKS5jaGlsZHJlbignLmhpZGRlbicpLnNsaWNlKDAsICRzaWJsaW5ncy5sZW5ndGggKiAyKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkdXBwZXJMZXZlbC5lcSgyKS5jaGlsZHJlbignLmhpZGRlbicpLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcbiAgICAgIH1cbiAgICAgIC8vIHRoaXJkbHksIGRvIHNvbWUgY2xlYW5pbmcgc3R1ZmZcbiAgICAgIGlmICghdGhpcy5nZXROb2RlU3RhdGUoJG5vZGUsICdwYXJlbnQnKS52aXNpYmxlKSB7XG4gICAgICAgICR1cHBlckxldmVsLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcbiAgICAgICAgdmFyIHBhcmVudCA9ICR1cHBlckxldmVsLmZpbmQoJy5ub2RlJylbMF07XG4gICAgICAgIHRoaXMucmVwYWludChwYXJlbnQpO1xuICAgICAgICAkKHBhcmVudCkuYWRkQ2xhc3MoJ3NsaWRpbmcnKS5yZW1vdmVDbGFzcygnc2xpZGUtZG93bicpLm9uZSgndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ3NsaWRpbmcnKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBsYXN0bHksIHNob3cgdGhlIHNpYmxpbmcgbm9kZXMgd2l0aCBhbmltYXRpb25cbiAgICAgIHZhciAkdmlzaWJsZU5vZGVzID0gJHNpYmxpbmdzLmZpbmQoJy5ub2RlJykuZmlsdGVyKHRoaXMuaXNWaXNpYmxlTm9kZS5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMucmVwYWludCgkdmlzaWJsZU5vZGVzLmdldCgwKSk7XG4gICAgICAkdmlzaWJsZU5vZGVzLmFkZENsYXNzKCdzbGlkaW5nJykucmVtb3ZlQ2xhc3MoJ3NsaWRlLWxlZnQgc2xpZGUtcmlnaHQnKTtcbiAgICAgICR2aXNpYmxlTm9kZXMuZXEoMCkub25lKCd0cmFuc2l0aW9uZW5kJywgeyAnbm9kZSc6ICRub2RlLCAndmlzaWJsZU5vZGVzJzogJHZpc2libGVOb2RlcyB9LCB0aGlzLnNob3dTaWJsaW5nc0VuZC5iaW5kKHRoaXMpKTtcbiAgICB9LFxuICAgIC8vIHN0YXJ0IHVwIGxvYWRpbmcgc3RhdHVzIGZvciByZXF1ZXN0aW5nIG5ldyBub2Rlc1xuICAgIHN0YXJ0TG9hZGluZzogZnVuY3Rpb24gKCRhcnJvdywgJG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgIHZhciAkY2hhcnQgPSAkbm9kZS5jbG9zZXN0KCcub3JnY2hhcnQnKTtcbiAgICAgIGlmICh0eXBlb2YgJGNoYXJ0LmRhdGEoJ2luQWpheCcpICE9PSAndW5kZWZpbmVkJyAmJiAkY2hhcnQuZGF0YSgnaW5BamF4JykgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAkYXJyb3cuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgJG5vZGUuYXBwZW5kKCc8aSBjbGFzcz1cImZhIGZhLWNpcmNsZS1vLW5vdGNoIGZhLXNwaW4gc3Bpbm5lclwiPjwvaT4nKTtcbiAgICAgICRub2RlLmNoaWxkcmVuKCkubm90KCcuc3Bpbm5lcicpLmNzcygnb3BhY2l0eScsIDAuMik7XG4gICAgICAkY2hhcnQuZGF0YSgnaW5BamF4JywgdHJ1ZSk7XG4gICAgICAkKCcub2MtZXhwb3J0LWJ0bicgKyAob3B0aW9ucy5jaGFydENsYXNzICE9PSAnJyA/ICcuJyArIG9wdGlvbnMuY2hhcnRDbGFzcyA6ICcnKSkucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgLy8gdGVybWluYXRlIGxvYWRpbmcgc3RhdHVzIGZvciByZXF1ZXN0aW5nIG5ldyBub2Rlc1xuICAgIGVuZExvYWRpbmc6IGZ1bmN0aW9uICgkYXJyb3csICRub2RlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgJGNoYXJ0ID0gJG5vZGUuY2xvc2VzdCgnZGl2Lm9yZ2NoYXJ0Jyk7XG4gICAgICAkYXJyb3cucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgJG5vZGUuZmluZCgnLnNwaW5uZXInKS5yZW1vdmUoKTtcbiAgICAgICRub2RlLmNoaWxkcmVuKCkucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICRjaGFydC5kYXRhKCdpbkFqYXgnLCBmYWxzZSk7XG4gICAgICAkKCcub2MtZXhwb3J0LWJ0bicgKyAob3B0aW9ucy5jaGFydENsYXNzICE9PSAnJyA/ICcuJyArIG9wdGlvbnMuY2hhcnRDbGFzcyA6ICcnKSkucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgfSxcbiAgICAvLyB3aGV0aGVyIHRoZSBjdXJzb3IgaXMgaG92ZXJpbmcgb3ZlciB0aGUgbm9kZVxuICAgIGlzSW5BY3Rpb246IGZ1bmN0aW9uICgkbm9kZSkge1xuICAgICAgcmV0dXJuICRub2RlLmNoaWxkcmVuKCcuZWRnZScpLmF0dHIoJ2NsYXNzJykuaW5kZXhPZignZmEtJykgPiAtMSA/IHRydWUgOiBmYWxzZTtcbiAgICB9LFxuICAgIC8vXG4gICAgc3dpdGNoVmVydGljYWxBcnJvdzogZnVuY3Rpb24gKCRhcnJvdykge1xuICAgICAgJGFycm93LnRvZ2dsZUNsYXNzKCdmYS1jaGV2cm9uLXVwJykudG9nZ2xlQ2xhc3MoJ2ZhLWNoZXZyb24tZG93bicpO1xuICAgIH0sXG4gICAgLy9cbiAgICBzd2l0Y2hIb3Jpem9udGFsQXJyb3c6IGZ1bmN0aW9uICgkbm9kZSkge1xuICAgICAgdmFyIG9wdHMgPSAkbm9kZS5jbG9zZXN0KCcub3JnY2hhcnQnKS5kYXRhKCdvcHRpb25zJyk7XG4gICAgICBpZiAob3B0cy50b2dnbGVTaWJsaW5nc1Jlc3AgJiYgKHR5cGVvZiBvcHRzLmFqYXhVUkwgPT09ICd1bmRlZmluZWQnIHx8ICRub2RlLmNsb3Nlc3QoJy5ub2RlcycpLmRhdGEoJ3NpYmxpbmdzTG9hZGVkJykpKSB7XG4gICAgICAgIHZhciAkcHJldlNpYiA9ICRub2RlLmNsb3Nlc3QoJ3RhYmxlJykucGFyZW50KCkucHJldigpO1xuICAgICAgICBpZiAoJHByZXZTaWIubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKCRwcmV2U2liLmlzKCcuaGlkZGVuJykpIHtcbiAgICAgICAgICAgICRub2RlLmNoaWxkcmVuKCcubGVmdEVkZ2UnKS5hZGRDbGFzcygnZmEtY2hldnJvbi1sZWZ0JykucmVtb3ZlQ2xhc3MoJ2ZhLWNoZXZyb24tcmlnaHQnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJG5vZGUuY2hpbGRyZW4oJy5sZWZ0RWRnZScpLmFkZENsYXNzKCdmYS1jaGV2cm9uLXJpZ2h0JykucmVtb3ZlQ2xhc3MoJ2ZhLWNoZXZyb24tbGVmdCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgJG5leHRTaWIgPSAkbm9kZS5jbG9zZXN0KCd0YWJsZScpLnBhcmVudCgpLm5leHQoKTtcbiAgICAgICAgaWYgKCRuZXh0U2liLmxlbmd0aCkge1xuICAgICAgICAgIGlmICgkbmV4dFNpYi5pcygnLmhpZGRlbicpKSB7XG4gICAgICAgICAgICAkbm9kZS5jaGlsZHJlbignLnJpZ2h0RWRnZScpLmFkZENsYXNzKCdmYS1jaGV2cm9uLXJpZ2h0JykucmVtb3ZlQ2xhc3MoJ2ZhLWNoZXZyb24tbGVmdCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkbm9kZS5jaGlsZHJlbignLnJpZ2h0RWRnZScpLmFkZENsYXNzKCdmYS1jaGV2cm9uLWxlZnQnKS5yZW1vdmVDbGFzcygnZmEtY2hldnJvbi1yaWdodCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyICRzaWJzID0gJG5vZGUuY2xvc2VzdCgndGFibGUnKS5wYXJlbnQoKS5zaWJsaW5ncygpO1xuICAgICAgICB2YXIgc2lic1Zpc2libGUgPSAkc2licy5sZW5ndGggPyAhJHNpYnMuaXMoJy5oaWRkZW4nKSA6IGZhbHNlO1xuICAgICAgICAkbm9kZS5jaGlsZHJlbignLmxlZnRFZGdlJykudG9nZ2xlQ2xhc3MoJ2ZhLWNoZXZyb24tcmlnaHQnLCBzaWJzVmlzaWJsZSkudG9nZ2xlQ2xhc3MoJ2ZhLWNoZXZyb24tbGVmdCcsICFzaWJzVmlzaWJsZSk7XG4gICAgICAgICRub2RlLmNoaWxkcmVuKCcucmlnaHRFZGdlJykudG9nZ2xlQ2xhc3MoJ2ZhLWNoZXZyb24tbGVmdCcsIHNpYnNWaXNpYmxlKS50b2dnbGVDbGFzcygnZmEtY2hldnJvbi1yaWdodCcsICFzaWJzVmlzaWJsZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvL1xuICAgIHJlcGFpbnQ6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBpZiAobm9kZSkge1xuICAgICAgICBub2RlLnN0eWxlLm9mZnNldFdpZHRoID0gbm9kZS5vZmZzZXRXaWR0aDtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIGNyZWF0ZSBub2RlXG4gICAgY3JlYXRlTm9kZTogZnVuY3Rpb24gKG5vZGVEYXRhLCBsZXZlbCwgb3B0cykge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgaWYgKCFub2RlRGF0YS5jaGlsZHJlbikgeyBub2RlRGF0YS5jaGlsZHJlbiA9IFtdOyB9XG4gICAgICAkLmVhY2gobm9kZURhdGEuY2hpbGRyZW4sIGZ1bmN0aW9uIChpbmRleCwgY2hpbGQpIHtcbiAgICAgICAgY2hpbGQucGFyZW50SWQgPSBub2RlRGF0YS5pZDtcbiAgICAgIH0pO1xuICAgICAgdmFyIGR0ZCA9ICQuRGVmZXJyZWQoKTtcbiAgICAgIC8vIGNvbnN0cnVjdCB0aGUgY29udGVudCBvZiBub2RlXG4gICAgICB2YXIgJG5vZGVEaXYgPSAkKCc8ZGl2JyArIChvcHRzLmRyYWdnYWJsZSA/ICcgZHJhZ2dhYmxlPVwidHJ1ZVwiJyA6ICcnKSArIChub2RlRGF0YVtvcHRzLm5vZGVJZF0gPyAnIGlkPVwiJyArIG5vZGVEYXRhW29wdHMubm9kZUlkXSArICdcIicgOiAnJykgKyAobm9kZURhdGEucGFyZW50SWQgPyAnIGRhdGEtcGFyZW50PVwiJyArIG5vZGVEYXRhLnBhcmVudElkICsgJ1wiJyA6ICcnKSArICc+JylcbiAgICAgICAgLmFkZENsYXNzKCdub2RlICcgKyAobm9kZURhdGEuY2xhc3NOYW1lIHx8ICcnKSArICAobGV2ZWwgPj0gb3B0cy5kZXB0aCA/ICcgc2xpZGUtdXAnIDogJycpKTtcbiAgICAgIGlmIChvcHRzLm5vZGVUZW1wbGF0ZSkge1xuICAgICAgICAkbm9kZURpdi5hcHBlbmQob3B0cy5ub2RlVGVtcGxhdGUobm9kZURhdGEpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRub2RlRGl2LmFwcGVuZCgnPGRpdiBjbGFzcz1cInRpdGxlXCI+JyArIG5vZGVEYXRhW29wdHMubm9kZVRpdGxlXSArICc8L2Rpdj4nKVxuICAgICAgICAgIC5hcHBlbmQodHlwZW9mIG9wdHMubm9kZUNvbnRlbnQgIT09ICd1bmRlZmluZWQnID8gJzxkaXYgY2xhc3M9XCJjb250ZW50XCI+JyArIChub2RlRGF0YVtvcHRzLm5vZGVDb250ZW50XSB8fCAnJykgKyAnPC9kaXY+JyA6ICcnKTtcbiAgICAgIH1cbiAgICAgIC8vIGFwcGVuZCA0IGRpcmVjdGlvbiBhcnJvd3Mgb3IgZXhwYW5kL2NvbGxhcHNlIGJ1dHRvbnNcbiAgICAgIHZhciBmbGFncyA9IG5vZGVEYXRhLnJlbGF0aW9uc2hpcCB8fCAnJztcbiAgICAgIGlmIChvcHRzLnZlcnRpY2FsRGVwdGggJiYgKGxldmVsICsgMikgPiBvcHRzLnZlcnRpY2FsRGVwdGgpIHtcbiAgICAgICAgaWYgKChsZXZlbCArIDEpID49IG9wdHMudmVydGljYWxEZXB0aCAmJiBOdW1iZXIoZmxhZ3Muc3Vic3RyKDIsMSkpKSB7XG4gICAgICAgICAgdmFyIGljb24gPSBsZXZlbCArIDEgID49IG9wdHMuZGVwdGggPyAncGx1cycgOiAnbWludXMnO1xuICAgICAgICAgICRub2RlRGl2LmFwcGVuZCgnPGkgY2xhc3M9XCJ0b2dnbGVCdG4gZmEgZmEtJyArIGljb24gKyAnLXNxdWFyZVwiPjwvaT4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKE51bWJlcihmbGFncy5zdWJzdHIoMCwxKSkpIHtcbiAgICAgICAgICAkbm9kZURpdi5hcHBlbmQoJzxpIGNsYXNzPVwiZWRnZSB2ZXJ0aWNhbEVkZ2UgdG9wRWRnZSBmYVwiPjwvaT4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZihOdW1iZXIoZmxhZ3Muc3Vic3RyKDEsMSkpKSB7XG4gICAgICAgICAgJG5vZGVEaXYuYXBwZW5kKCc8aSBjbGFzcz1cImVkZ2UgaG9yaXpvbnRhbEVkZ2UgcmlnaHRFZGdlIGZhXCI+PC9pPicgK1xuICAgICAgICAgICAgJzxpIGNsYXNzPVwiZWRnZSBob3Jpem9udGFsRWRnZSBsZWZ0RWRnZSBmYVwiPjwvaT4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZihOdW1iZXIoZmxhZ3Muc3Vic3RyKDIsMSkpKSB7XG4gICAgICAgICAgJG5vZGVEaXYuYXBwZW5kKCc8aSBjbGFzcz1cImVkZ2UgdmVydGljYWxFZGdlIGJvdHRvbUVkZ2UgZmFcIj48L2k+JylcbiAgICAgICAgICAgIC5jaGlsZHJlbignLnRpdGxlJykucHJlcGVuZCgnPGkgY2xhc3M9XCJmYSAnKyBvcHRzLnBhcmVudE5vZGVTeW1ib2wgKyAnIHN5bWJvbFwiPjwvaT4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkbm9kZURpdi5vbignbW91c2VlbnRlciBtb3VzZWxlYXZlJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyICRub2RlID0gJCh0aGlzKSwgZmxhZyA9IGZhbHNlO1xuICAgICAgICB2YXIgJHRvcEVkZ2UgPSAkbm9kZS5jaGlsZHJlbignLnRvcEVkZ2UnKTtcbiAgICAgICAgdmFyICRyaWdodEVkZ2UgPSAkbm9kZS5jaGlsZHJlbignLnJpZ2h0RWRnZScpO1xuICAgICAgICB2YXIgJGJvdHRvbUVkZ2UgPSAkbm9kZS5jaGlsZHJlbignLmJvdHRvbUVkZ2UnKTtcbiAgICAgICAgdmFyICRsZWZ0RWRnZSA9ICRub2RlLmNoaWxkcmVuKCcubGVmdEVkZ2UnKTtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWVudGVyJykge1xuICAgICAgICAgIGlmICgkdG9wRWRnZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZsYWcgPSB0aGF0LmdldE5vZGVTdGF0ZSgkbm9kZSwgJ3BhcmVudCcpLnZpc2libGU7XG4gICAgICAgICAgICAkdG9wRWRnZS50b2dnbGVDbGFzcygnZmEtY2hldnJvbi11cCcsICFmbGFnKS50b2dnbGVDbGFzcygnZmEtY2hldnJvbi1kb3duJywgZmxhZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkYm90dG9tRWRnZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZsYWcgPSB0aGF0LmdldE5vZGVTdGF0ZSgkbm9kZSwgJ2NoaWxkcmVuJykudmlzaWJsZTtcbiAgICAgICAgICAgICRib3R0b21FZGdlLnRvZ2dsZUNsYXNzKCdmYS1jaGV2cm9uLWRvd24nLCAhZmxhZykudG9nZ2xlQ2xhc3MoJ2ZhLWNoZXZyb24tdXAnLCBmbGFnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRsZWZ0RWRnZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoYXQuc3dpdGNoSG9yaXpvbnRhbEFycm93KCRub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJG5vZGUuY2hpbGRyZW4oJy5lZGdlJykucmVtb3ZlQ2xhc3MoJ2ZhLWNoZXZyb24tdXAgZmEtY2hldnJvbi1kb3duIGZhLWNoZXZyb24tcmlnaHQgZmEtY2hldnJvbi1sZWZ0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBkZWZpbmUgY2xpY2sgZXZlbnQgaGFuZGxlclxuICAgICAgJG5vZGVEaXYub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcub3JnY2hhcnQnKS5maW5kKCcuZm9jdXNlZCcpLnJlbW92ZUNsYXNzKCdmb2N1c2VkJyk7XG4gICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2ZvY3VzZWQnKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBkZWZpbmUgY2xpY2sgZXZlbnQgaGFuZGxlciBmb3IgdGhlIHRvcCBlZGdlXG4gICAgICAkbm9kZURpdi5vbignY2xpY2snLCAnLnRvcEVkZ2UnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdmFyICR0aGF0ID0gJCh0aGlzKTtcbiAgICAgICAgdmFyICRub2RlID0gJHRoYXQucGFyZW50KCk7XG4gICAgICAgIHZhciBwYXJlbnRTdGF0ZSA9IHRoYXQuZ2V0Tm9kZVN0YXRlKCRub2RlLCAncGFyZW50Jyk7XG4gICAgICAgIGlmIChwYXJlbnRTdGF0ZS5leGlzdCkge1xuICAgICAgICAgIHZhciAkcGFyZW50ID0gJG5vZGUuY2xvc2VzdCgndGFibGUnKS5jbG9zZXN0KCd0cicpLnNpYmxpbmdzKCc6Zmlyc3QnKS5maW5kKCcubm9kZScpO1xuICAgICAgICAgIGlmICgkcGFyZW50LmlzKCcuc2xpZGluZycpKSB7IHJldHVybjsgfVxuICAgICAgICAgIC8vIGhpZGUgdGhlIGFuY2VzdG9yIG5vZGVzIGFuZCBzaWJsaW5nIG5vZGVzIG9mIHRoZSBzcGVjaWZpZWQgbm9kZVxuICAgICAgICAgIGlmIChwYXJlbnRTdGF0ZS52aXNpYmxlKSB7XG4gICAgICAgICAgICB0aGF0LmhpZGVQYXJlbnQoJG5vZGUpO1xuICAgICAgICAgICAgJHBhcmVudC5vbmUoJ3RyYW5zaXRpb25lbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKHRoYXQuaXNJbkFjdGlvbigkbm9kZSkpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnN3aXRjaFZlcnRpY2FsQXJyb3coJHRoYXQpO1xuICAgICAgICAgICAgICAgIHRoYXQuc3dpdGNoSG9yaXpvbnRhbEFycm93KCRub2RlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHsgLy8gc2hvdyB0aGUgYW5jZXN0b3JzIGFuZCBzaWJsaW5nc1xuICAgICAgICAgICAgdGhhdC5zaG93UGFyZW50KCRub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbG9hZCB0aGUgbmV3IHBhcmVudCBub2RlIG9mIHRoZSBzcGVjaWZpZWQgbm9kZSBieSBhamF4IHJlcXVlc3RcbiAgICAgICAgICB2YXIgbm9kZUlkID0gJHRoYXQucGFyZW50KClbMF0uaWQ7XG4gICAgICAgICAgLy8gc3RhcnQgdXAgbG9hZGluZyBzdGF0dXNcbiAgICAgICAgICBpZiAodGhhdC5zdGFydExvYWRpbmcoJHRoYXQsICRub2RlLCBvcHRzKSkge1xuICAgICAgICAgIC8vIGxvYWQgbmV3IG5vZGVzXG4gICAgICAgICAgICAkLmFqYXgoeyAndXJsJzogJC5pc0Z1bmN0aW9uKG9wdHMuYWpheFVSTC5wYXJlbnQpID8gb3B0cy5hamF4VVJMLnBhcmVudChub2RlRGF0YSkgOiBvcHRzLmFqYXhVUkwucGFyZW50ICsgbm9kZUlkLCAnZGF0YVR5cGUnOiAnanNvbicgfSlcbiAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgaWYgKCRub2RlLmNsb3Nlc3QoJy5vcmdjaGFydCcpLmRhdGEoJ2luQWpheCcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEkLmlzRW1wdHlPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgIHRoYXQuYWRkUGFyZW50KCRub2RlLCBkYXRhLCBvcHRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmFpbChmdW5jdGlvbigpIHsgY29uc29sZS5sb2coJ0ZhaWxlZCB0byBnZXQgcGFyZW50IG5vZGUgZGF0YScpOyB9KVxuICAgICAgICAgICAgLmFsd2F5cyhmdW5jdGlvbigpIHsgdGhhdC5lbmRMb2FkaW5nKCR0aGF0LCAkbm9kZSwgb3B0cyk7IH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIGJpbmQgY2xpY2sgZXZlbnQgaGFuZGxlciBmb3IgdGhlIGJvdHRvbSBlZGdlXG4gICAgICAkbm9kZURpdi5vbignY2xpY2snLCAnLmJvdHRvbUVkZ2UnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdmFyICR0aGF0ID0gJCh0aGlzKTtcbiAgICAgICAgdmFyICRub2RlID0gJHRoYXQucGFyZW50KCk7XG4gICAgICAgIHZhciBjaGlsZHJlblN0YXRlID0gdGhhdC5nZXROb2RlU3RhdGUoJG5vZGUsICdjaGlsZHJlbicpO1xuICAgICAgICBpZiAoY2hpbGRyZW5TdGF0ZS5leGlzdCkge1xuICAgICAgICAgIHZhciAkY2hpbGRyZW4gPSAkbm9kZS5jbG9zZXN0KCd0cicpLnNpYmxpbmdzKCc6bGFzdCcpO1xuICAgICAgICAgIGlmICgkY2hpbGRyZW4uZmluZCgnLnNsaWRpbmcnKS5sZW5ndGgpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgLy8gaGlkZSB0aGUgZGVzY2VuZGFudCBub2RlcyBvZiB0aGUgc3BlY2lmaWVkIG5vZGVcbiAgICAgICAgICBpZiAoY2hpbGRyZW5TdGF0ZS52aXNpYmxlKSB7XG4gICAgICAgICAgICB0aGF0LmhpZGVDaGlsZHJlbigkbm9kZSk7XG4gICAgICAgICAgfSBlbHNlIHsgLy8gc2hvdyB0aGUgZGVzY2VuZGFudHNcbiAgICAgICAgICAgIHRoYXQuc2hvd0NoaWxkcmVuKCRub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7IC8vIGxvYWQgdGhlIG5ldyBjaGlsZHJlbiBub2RlcyBvZiB0aGUgc3BlY2lmaWVkIG5vZGUgYnkgYWpheCByZXF1ZXN0XG4gICAgICAgICAgdmFyIG5vZGVJZCA9ICR0aGF0LnBhcmVudCgpWzBdLmlkO1xuICAgICAgICAgIGlmICh0aGF0LnN0YXJ0TG9hZGluZygkdGhhdCwgJG5vZGUsIG9wdHMpKSB7XG4gICAgICAgICAgICAkLmFqYXgoeyAndXJsJzogJC5pc0Z1bmN0aW9uKG9wdHMuYWpheFVSTC5jaGlsZHJlbikgPyBvcHRzLmFqYXhVUkwuY2hpbGRyZW4obm9kZURhdGEpIDogb3B0cy5hamF4VVJMLmNoaWxkcmVuICsgbm9kZUlkLCAnZGF0YVR5cGUnOiAnanNvbicgfSlcbiAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uKGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKSB7XG4gICAgICAgICAgICAgIGlmICgkbm9kZS5jbG9zZXN0KCcub3JnY2hhcnQnKS5kYXRhKCdpbkFqYXgnKSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgdGhhdC5hZGRDaGlsZHJlbigkbm9kZSwgZGF0YSwgJC5leHRlbmQoe30sIG9wdHMsIHsgZGVwdGg6IDAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5mYWlsKGZ1bmN0aW9uKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRmFpbGVkIHRvIGdldCBjaGlsZHJlbiBub2RlcyBkYXRhJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFsd2F5cyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdGhhdC5lbmRMb2FkaW5nKCR0aGF0LCAkbm9kZSwgb3B0cyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBldmVudCBoYW5kbGVyIGZvciB0b2dnbGUgYnV0dG9ucyBpbiBIeWJyaWQoaG9yaXpvbnRhbCArIHZlcnRpY2FsKSBPcmdDaGFydFxuICAgICAgJG5vZGVEaXYub24oJ2NsaWNrJywgJy50b2dnbGVCdG4nLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICB2YXIgJGRlc2NXcmFwcGVyID0gJHRoaXMucGFyZW50KCkubmV4dCgpO1xuICAgICAgICB2YXIgJGRlc2NlbmRhbnRzID0gJGRlc2NXcmFwcGVyLmZpbmQoJy5ub2RlJyk7XG4gICAgICAgIHZhciAkY2hpbGRyZW4gPSAkZGVzY1dyYXBwZXIuY2hpbGRyZW4oKS5jaGlsZHJlbignLm5vZGUnKTtcbiAgICAgICAgaWYgKCRjaGlsZHJlbi5pcygnLnNsaWRpbmcnKSkgeyByZXR1cm47IH1cbiAgICAgICAgJHRoaXMudG9nZ2xlQ2xhc3MoJ2ZhLXBsdXMtc3F1YXJlIGZhLW1pbnVzLXNxdWFyZScpO1xuICAgICAgICBpZiAoJGRlc2NlbmRhbnRzLmVxKDApLmlzKCcuc2xpZGUtdXAnKSkge1xuICAgICAgICAgICRkZXNjV3JhcHBlci5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgdGhhdC5yZXBhaW50KCRjaGlsZHJlbi5nZXQoMCkpO1xuICAgICAgICAgICRjaGlsZHJlbi5hZGRDbGFzcygnc2xpZGluZycpLnJlbW92ZUNsYXNzKCdzbGlkZS11cCcpLmVxKDApLm9uZSgndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJGNoaWxkcmVuLnJlbW92ZUNsYXNzKCdzbGlkaW5nJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGRlc2NlbmRhbnRzLmFkZENsYXNzKCdzbGlkaW5nIHNsaWRlLXVwJykuZXEoMCkub25lKCd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkZGVzY2VuZGFudHMucmVtb3ZlQ2xhc3MoJ3NsaWRpbmcnKTtcbiAgICAgICAgICAgIC8vICRkZXNjV3JhcHBlci5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICAkZGVzY2VuZGFudHMuY2xvc2VzdCgndWwnKS5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgJGRlc2NlbmRhbnRzLmZpbmQoJy50b2dnbGVCdG4nKS5yZW1vdmVDbGFzcygnZmEtbWludXMtc3F1YXJlJykuYWRkQ2xhc3MoJ2ZhLXBsdXMtc3F1YXJlJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBiaW5kIGNsaWNrIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBsZWZ0IGFuZCByaWdodCBlZGdlc1xuICAgICAgJG5vZGVEaXYub24oJ2NsaWNrJywgJy5sZWZ0RWRnZSwgLnJpZ2h0RWRnZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB2YXIgJHRoYXQgPSAkKHRoaXMpO1xuICAgICAgICB2YXIgJG5vZGUgPSAkdGhhdC5wYXJlbnQoKTtcbiAgICAgICAgdmFyIHNpYmxpbmdzU3RhdGUgPSB0aGF0LmdldE5vZGVTdGF0ZSgkbm9kZSwgJ3NpYmxpbmdzJyk7XG4gICAgICAgIGlmIChzaWJsaW5nc1N0YXRlLmV4aXN0KSB7XG4gICAgICAgICAgdmFyICRzaWJsaW5ncyA9ICRub2RlLmNsb3Nlc3QoJ3RhYmxlJykucGFyZW50KCkuc2libGluZ3MoKTtcbiAgICAgICAgICBpZiAoJHNpYmxpbmdzLmZpbmQoJy5zbGlkaW5nJykubGVuZ3RoKSB7IHJldHVybjsgfVxuICAgICAgICAgIGlmIChvcHRzLnRvZ2dsZVNpYmxpbmdzUmVzcCkge1xuICAgICAgICAgICAgdmFyICRwcmV2U2liID0gJG5vZGUuY2xvc2VzdCgndGFibGUnKS5wYXJlbnQoKS5wcmV2KCk7XG4gICAgICAgICAgICB2YXIgJG5leHRTaWIgPSAkbm9kZS5jbG9zZXN0KCd0YWJsZScpLnBhcmVudCgpLm5leHQoKTtcbiAgICAgICAgICAgIGlmICgkdGhhdC5pcygnLmxlZnRFZGdlJykpIHtcbiAgICAgICAgICAgICAgaWYgKCRwcmV2U2liLmlzKCcuaGlkZGVuJykpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnNob3dTaWJsaW5ncygkbm9kZSwgJ2xlZnQnKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGF0LmhpZGVTaWJsaW5ncygkbm9kZSwgJ2xlZnQnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCRuZXh0U2liLmlzKCcuaGlkZGVuJykpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnNob3dTaWJsaW5ncygkbm9kZSwgJ3JpZ2h0Jyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhhdC5oaWRlU2libGluZ3MoJG5vZGUsICdyaWdodCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzaWJsaW5nc1N0YXRlLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgdGhhdC5oaWRlU2libGluZ3MoJG5vZGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhhdC5zaG93U2libGluZ3MoJG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBsb2FkIHRoZSBuZXcgc2libGluZyBub2RlcyBvZiB0aGUgc3BlY2lmaWVkIG5vZGUgYnkgYWpheCByZXF1ZXN0XG4gICAgICAgICAgdmFyIG5vZGVJZCA9ICR0aGF0LnBhcmVudCgpWzBdLmlkO1xuICAgICAgICAgIHZhciB1cmwgPSAodGhhdC5nZXROb2RlU3RhdGUoJG5vZGUsICdwYXJlbnQnKS5leGlzdCkgP1xuICAgICAgICAgICAgKCQuaXNGdW5jdGlvbihvcHRzLmFqYXhVUkwuc2libGluZ3MpID8gb3B0cy5hamF4VVJMLnNpYmxpbmdzKG5vZGVEYXRhKSA6IG9wdHMuYWpheFVSTC5zaWJsaW5ncyArIG5vZGVJZCkgOlxuICAgICAgICAgICAgKCQuaXNGdW5jdGlvbihvcHRzLmFqYXhVUkwuZmFtaWxpZXMpID8gb3B0cy5hamF4VVJMLmZhbWlsaWVzKG5vZGVEYXRhKSA6IG9wdHMuYWpheFVSTC5mYW1pbGllcyArIG5vZGVJZCk7XG4gICAgICAgICAgaWYgKHRoYXQuc3RhcnRMb2FkaW5nKCR0aGF0LCAkbm9kZSwgb3B0cykpIHtcbiAgICAgICAgICAgICQuYWpheCh7ICd1cmwnOiB1cmwsICdkYXRhVHlwZSc6ICdqc29uJyB9KVxuICAgICAgICAgICAgLmRvbmUoZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cywganFYSFIpIHtcbiAgICAgICAgICAgICAgaWYgKCRub2RlLmNsb3Nlc3QoJy5vcmdjaGFydCcpLmRhdGEoJ2luQWpheCcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuc2libGluZ3MgfHwgZGF0YS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgdGhhdC5hZGRTaWJsaW5ncygkbm9kZSwgZGF0YSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZhaWwoZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGYWlsZWQgdG8gZ2V0IHNpYmxpbmcgbm9kZXMgZGF0YScpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hbHdheXMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHRoYXQuZW5kTG9hZGluZygkdGhhdCwgJG5vZGUsIG9wdHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChvcHRzLmRyYWdnYWJsZSkge1xuICAgICAgICAkbm9kZURpdi5vbignZHJhZ3N0YXJ0JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICB2YXIgb3JpZ0V2ZW50ID0gZXZlbnQub3JpZ2luYWxFdmVudDtcbiAgICAgICAgICB2YXIgaXNGaXJlZm94ID0gL2ZpcmVmb3gvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgaWYgKGlzRmlyZWZveCkge1xuICAgICAgICAgICAgb3JpZ0V2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L2h0bWwnLCAnaGFjayBmb3IgZmlyZWZveCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBpZiB1c2VycyBlbmFibGUgem9vbSBvciBkaXJlY3Rpb24gb3B0aW9uc1xuICAgICAgICAgIGlmICgkbm9kZURpdi5jbG9zZXN0KCcub3JnY2hhcnQnKS5jc3MoJ3RyYW5zZm9ybScpICE9PSAnbm9uZScpIHtcbiAgICAgICAgICAgIHZhciBnaG9zdE5vZGUsIG5vZGVDb3ZlcjtcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdob3N0LW5vZGUnKSkge1xuICAgICAgICAgICAgICBnaG9zdE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInN2Z1wiKTtcbiAgICAgICAgICAgICAgZ2hvc3ROb2RlLmNsYXNzTGlzdC5hZGQoJ2dob3N0LW5vZGUnKTtcbiAgICAgICAgICAgICAgbm9kZUNvdmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsJ3JlY3QnKTtcbiAgICAgICAgICAgICAgZ2hvc3ROb2RlLmFwcGVuZENoaWxkKG5vZGVDb3Zlcik7XG4gICAgICAgICAgICAgICRub2RlRGl2LmNsb3Nlc3QoJy5vcmdjaGFydCcpLmFwcGVuZChnaG9zdE5vZGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZ2hvc3ROb2RlID0gJG5vZGVEaXYuY2xvc2VzdCgnLm9yZ2NoYXJ0JykuY2hpbGRyZW4oJy5naG9zdC1ub2RlJykuZ2V0KDApO1xuICAgICAgICAgICAgICBub2RlQ292ZXIgPSAkKGdob3N0Tm9kZSkuY2hpbGRyZW4oKS5nZXQoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdHJhbnNWYWx1ZXMgPSAkbm9kZURpdi5jbG9zZXN0KCcub3JnY2hhcnQnKS5jc3MoJ3RyYW5zZm9ybScpLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICB2YXIgc2NhbGUgPSBNYXRoLmFicyh3aW5kb3cucGFyc2VGbG9hdCgob3B0cy5kaXJlY3Rpb24gPT09ICd0MmInIHx8IG9wdHMuZGlyZWN0aW9uID09PSAnYjJ0JykgPyB0cmFuc1ZhbHVlc1swXS5zbGljZSh0cmFuc1ZhbHVlc1swXS5pbmRleE9mKCcoJykgKyAxKSA6IHRyYW5zVmFsdWVzWzFdKSk7XG4gICAgICAgICAgICBnaG9zdE5vZGUuc2V0QXR0cmlidXRlKCd3aWR0aCcsICRub2RlRGl2Lm91dGVyV2lkdGgoZmFsc2UpKTtcbiAgICAgICAgICAgIGdob3N0Tm9kZS5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsICRub2RlRGl2Lm91dGVySGVpZ2h0KGZhbHNlKSk7XG4gICAgICAgICAgICBub2RlQ292ZXIuc2V0QXR0cmlidXRlKCd4Jyw1ICogc2NhbGUpO1xuICAgICAgICAgICAgbm9kZUNvdmVyLnNldEF0dHJpYnV0ZSgneScsNSAqIHNjYWxlKTtcbiAgICAgICAgICAgIG5vZGVDb3Zlci5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgMTIwICogc2NhbGUpO1xuICAgICAgICAgICAgbm9kZUNvdmVyLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgNDAgKiBzY2FsZSk7XG4gICAgICAgICAgICBub2RlQ292ZXIuc2V0QXR0cmlidXRlKCdyeCcsIDQgKiBzY2FsZSk7XG4gICAgICAgICAgICBub2RlQ292ZXIuc2V0QXR0cmlidXRlKCdyeScsIDQgKiBzY2FsZSk7XG4gICAgICAgICAgICBub2RlQ292ZXIuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAxICogc2NhbGUpO1xuICAgICAgICAgICAgdmFyIHhPZmZzZXQgPSBvcmlnRXZlbnQub2Zmc2V0WCAqIHNjYWxlO1xuICAgICAgICAgICAgdmFyIHlPZmZzZXQgPSBvcmlnRXZlbnQub2Zmc2V0WSAqIHNjYWxlO1xuICAgICAgICAgICAgaWYgKG9wdHMuZGlyZWN0aW9uID09PSAnbDJyJykge1xuICAgICAgICAgICAgICB4T2Zmc2V0ID0gb3JpZ0V2ZW50Lm9mZnNldFkgKiBzY2FsZTtcbiAgICAgICAgICAgICAgeU9mZnNldCA9IG9yaWdFdmVudC5vZmZzZXRYICogc2NhbGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdHMuZGlyZWN0aW9uID09PSAncjJsJykge1xuICAgICAgICAgICAgICB4T2Zmc2V0ID0gJG5vZGVEaXYub3V0ZXJXaWR0aChmYWxzZSkgLSBvcmlnRXZlbnQub2Zmc2V0WSAqIHNjYWxlO1xuICAgICAgICAgICAgICB5T2Zmc2V0ID0gb3JpZ0V2ZW50Lm9mZnNldFggKiBzY2FsZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5kaXJlY3Rpb24gPT09ICdiMnQnKSB7XG4gICAgICAgICAgICAgIHhPZmZzZXQgPSAkbm9kZURpdi5vdXRlcldpZHRoKGZhbHNlKSAtIG9yaWdFdmVudC5vZmZzZXRYICogc2NhbGU7XG4gICAgICAgICAgICAgIHlPZmZzZXQgPSAkbm9kZURpdi5vdXRlckhlaWdodChmYWxzZSkgLSBvcmlnRXZlbnQub2Zmc2V0WSAqIHNjYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRmlyZWZveCkgeyAvLyBoYWNrIGZvciBvbGQgdmVyc2lvbiBvZiBGaXJlZm94KDwgNDguMClcbiAgICAgICAgICAgICAgbm9kZUNvdmVyLnNldEF0dHJpYnV0ZSgnZmlsbCcsICdyZ2IoMjU1LCAyNTUsIDI1NSknKTtcbiAgICAgICAgICAgICAgbm9kZUNvdmVyLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJ3JnYigxOTEsIDAsIDApJyk7XG4gICAgICAgICAgICAgIHZhciBnaG9zdE5vZGVXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgICAgICAgIGdob3N0Tm9kZVdyYXBwZXIuc3JjID0gJ2RhdGE6aW1hZ2Uvc3ZnK3htbDt1dGY4LCcgKyAobmV3IFhNTFNlcmlhbGl6ZXIoKSkuc2VyaWFsaXplVG9TdHJpbmcoZ2hvc3ROb2RlKTtcbiAgICAgICAgICAgICAgb3JpZ0V2ZW50LmRhdGFUcmFuc2Zlci5zZXREcmFnSW1hZ2UoZ2hvc3ROb2RlV3JhcHBlciwgeE9mZnNldCwgeU9mZnNldCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvcmlnRXZlbnQuZGF0YVRyYW5zZmVyLnNldERyYWdJbWFnZShnaG9zdE5vZGUsIHhPZmZzZXQsIHlPZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgJGRyYWdnZWQgPSAkKHRoaXMpO1xuICAgICAgICAgIHZhciAkZHJhZ1pvbmUgPSAkZHJhZ2dlZC5jbG9zZXN0KCcubm9kZXMnKS5zaWJsaW5ncygpLmVxKDApLmZpbmQoJy5ub2RlOmZpcnN0Jyk7XG4gICAgICAgICAgdmFyICRkcmFnSGllciA9ICRkcmFnZ2VkLmNsb3Nlc3QoJ3RhYmxlJykuZmluZCgnLm5vZGUnKTtcbiAgICAgICAgICAkZHJhZ2dlZC5jbG9zZXN0KCcub3JnY2hhcnQnKVxuICAgICAgICAgICAgLmRhdGEoJ2RyYWdnZWQnLCAkZHJhZ2dlZClcbiAgICAgICAgICAgIC5maW5kKCcubm9kZScpLmVhY2goZnVuY3Rpb24oaW5kZXgsIG5vZGUpIHtcbiAgICAgICAgICAgICAgaWYgKCRkcmFnSGllci5pbmRleChub2RlKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5kcm9wQ3JpdGVyaWEpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmRyb3BDcml0ZXJpYSgkZHJhZ2dlZCwgJGRyYWdab25lLCAkKG5vZGUpKSkge1xuICAgICAgICAgICAgICAgICAgICAkKG5vZGUpLmFkZENsYXNzKCdhbGxvd2VkRHJvcCcpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAkKG5vZGUpLmFkZENsYXNzKCdhbGxvd2VkRHJvcCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignZHJhZ292ZXInLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgaWYgKCEkKHRoaXMpLmlzKCcuYWxsb3dlZERyb3AnKSkge1xuICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdub25lJztcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignZHJhZ2VuZCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcub3JnY2hhcnQnKS5maW5kKCcuYWxsb3dlZERyb3AnKS5yZW1vdmVDbGFzcygnYWxsb3dlZERyb3AnKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdkcm9wJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICB2YXIgJGRyb3Bab25lID0gJCh0aGlzKTtcbiAgICAgICAgICB2YXIgJG9yZ2NoYXJ0ID0gJGRyb3Bab25lLmNsb3Nlc3QoJy5vcmdjaGFydCcpO1xuICAgICAgICAgIHZhciAkZHJhZ2dlZCA9ICRvcmdjaGFydC5kYXRhKCdkcmFnZ2VkJyk7XG4gICAgICAgICAgdmFyICRkcmFnWm9uZSA9ICRkcmFnZ2VkLmNsb3Nlc3QoJy5ub2RlcycpLnNpYmxpbmdzKCkuZXEoMCkuY2hpbGRyZW4oKTtcbiAgICAgICAgICB2YXIgZHJvcEV2ZW50ID0gJC5FdmVudCgnbm9kZWRyb3Aub3JnY2hhcnQnKTtcbiAgICAgICAgICAkb3JnY2hhcnQudHJpZ2dlcihkcm9wRXZlbnQsIHsgJ2RyYWdnZWROb2RlJzogJGRyYWdnZWQsICdkcmFnWm9uZSc6ICRkcmFnWm9uZS5jaGlsZHJlbigpLCAnZHJvcFpvbmUnOiAkZHJvcFpvbmUgfSk7XG4gICAgICAgICAgaWYgKGRyb3BFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBmaXJzdGx5LCBkZWFsIHdpdGggdGhlIGhpZXJhcmNoeSBvZiBkcm9wIHpvbmVcbiAgICAgICAgICBpZiAoISRkcm9wWm9uZS5jbG9zZXN0KCd0cicpLnNpYmxpbmdzKCkubGVuZ3RoKSB7IC8vIGlmIHRoZSBkcm9wIHpvbmUgaXMgYSBsZWFmIG5vZGVcbiAgICAgICAgICAgICRkcm9wWm9uZS5hcHBlbmQoJzxpIGNsYXNzPVwiZWRnZSB2ZXJ0aWNhbEVkZ2UgYm90dG9tRWRnZSBmYVwiPjwvaT4nKVxuICAgICAgICAgICAgICAucGFyZW50KCkuYXR0cignY29sc3BhbicsIDIpXG4gICAgICAgICAgICAgIC5wYXJlbnQoKS5hZnRlcignPHRyIGNsYXNzPVwibGluZXNcIj48dGQgY29sc3Bhbj1cIjJcIj48ZGl2IGNsYXNzPVwiZG93bkxpbmVcIj48L2Rpdj48L3RkPjwvdHI+J1xuICAgICAgICAgICAgICArICc8dHIgY2xhc3M9XCJsaW5lc1wiPjx0ZCBjbGFzcz1cInJpZ2h0TGluZVwiPiZuYnNwOzwvdGQ+PHRkIGNsYXNzPVwibGVmdExpbmVcIj4mbmJzcDs8L3RkPjwvdHI+J1xuICAgICAgICAgICAgICArICc8dHIgY2xhc3M9XCJub2Rlc1wiPjwvdHI+JylcbiAgICAgICAgICAgICAgLnNpYmxpbmdzKCc6bGFzdCcpLmFwcGVuZCgkZHJhZ2dlZC5maW5kKCcuaG9yaXpvbnRhbEVkZ2UnKS5yZW1vdmUoKS5lbmQoKS5jbG9zZXN0KCd0YWJsZScpLnBhcmVudCgpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGRyb3BDb2xzcGFuID0gcGFyc2VJbnQoJGRyb3Bab25lLnBhcmVudCgpLmF0dHIoJ2NvbHNwYW4nKSkgKyAyO1xuICAgICAgICAgICAgdmFyIGhvcml6b250YWxFZGdlcyA9ICc8aSBjbGFzcz1cImVkZ2UgaG9yaXpvbnRhbEVkZ2UgcmlnaHRFZGdlIGZhXCI+PC9pPjxpIGNsYXNzPVwiZWRnZSBob3Jpem9udGFsRWRnZSBsZWZ0RWRnZSBmYVwiPjwvaT4nO1xuICAgICAgICAgICAgJGRyb3Bab25lLmNsb3Nlc3QoJ3RyJykubmV4dCgpLmFkZEJhY2soKS5jaGlsZHJlbigpLmF0dHIoJ2NvbHNwYW4nLCBkcm9wQ29sc3Bhbik7XG4gICAgICAgICAgICBpZiAoISRkcmFnZ2VkLmZpbmQoJy5ob3Jpem9udGFsRWRnZScpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAkZHJhZ2dlZC5hcHBlbmQoaG9yaXpvbnRhbEVkZ2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRkcm9wWm9uZS5jbG9zZXN0KCd0cicpLnNpYmxpbmdzKCkuZXEoMSkuY2hpbGRyZW4oJzpsYXN0JykuYmVmb3JlKCc8dGQgY2xhc3M9XCJsZWZ0TGluZSB0b3BMaW5lXCI+Jm5ic3A7PC90ZD48dGQgY2xhc3M9XCJyaWdodExpbmUgdG9wTGluZVwiPiZuYnNwOzwvdGQ+JylcbiAgICAgICAgICAgICAgLmVuZCgpLm5leHQoKS5hcHBlbmQoJGRyYWdnZWQuY2xvc2VzdCgndGFibGUnKS5wYXJlbnQoKSk7XG4gICAgICAgICAgICB2YXIgJGRyb3BTaWJzID0gJGRyYWdnZWQuY2xvc2VzdCgndGFibGUnKS5wYXJlbnQoKS5zaWJsaW5ncygpLmZpbmQoJy5ub2RlOmZpcnN0Jyk7XG4gICAgICAgICAgICBpZiAoJGRyb3BTaWJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAkZHJvcFNpYnMuYXBwZW5kKGhvcml6b250YWxFZGdlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHNlY29uZGx5LCBkZWFsIHdpdGggdGhlIGhpZXJhcmNoeSBvZiBkcmFnZ2VkIG5vZGVcbiAgICAgICAgICB2YXIgZHJhZ0NvbHNwYW4gPSBwYXJzZUludCgkZHJhZ1pvbmUuYXR0cignY29sc3BhbicpKTtcbiAgICAgICAgICBpZiAoZHJhZ0NvbHNwYW4gPiAyKSB7XG4gICAgICAgICAgICAkZHJhZ1pvbmUuYXR0cignY29sc3BhbicsIGRyYWdDb2xzcGFuIC0gMilcbiAgICAgICAgICAgICAgLnBhcmVudCgpLm5leHQoKS5jaGlsZHJlbigpLmF0dHIoJ2NvbHNwYW4nLCBkcmFnQ29sc3BhbiAtIDIpXG4gICAgICAgICAgICAgIC5lbmQoKS5uZXh0KCkuY2hpbGRyZW4oKS5zbGljZSgxLCAzKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHZhciAkZHJhZ1NpYnMgPSAkZHJhZ1pvbmUucGFyZW50KCkuc2libGluZ3MoJy5ub2RlcycpLmNoaWxkcmVuKCkuZmluZCgnLm5vZGU6Zmlyc3QnKTtcbiAgICAgICAgICAgIGlmICgkZHJhZ1NpYnMubGVuZ3RoID09PTEpIHtcbiAgICAgICAgICAgICAgJGRyYWdTaWJzLmZpbmQoJy5ob3Jpem9udGFsRWRnZScpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkZHJhZ1pvbmUucmVtb3ZlQXR0cignY29sc3BhbicpXG4gICAgICAgICAgICAgIC5maW5kKCcuYm90dG9tRWRnZScpLnJlbW92ZSgpXG4gICAgICAgICAgICAgIC5lbmQoKS5lbmQoKS5zaWJsaW5ncygpLnJlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBhbGxvdyB1c2VyIHRvIGFwcGVuZCBkb20gbW9kaWZpY2F0aW9uIGFmdGVyIGZpbmlzaGluZyBub2RlIGNyZWF0ZSBvZiBvcmdjaGFydFxuICAgICAgaWYgKG9wdHMuY3JlYXRlTm9kZSkge1xuICAgICAgICBvcHRzLmNyZWF0ZU5vZGUoJG5vZGVEaXYsIG5vZGVEYXRhKTtcbiAgICAgIH1cbiAgICAgIGR0ZC5yZXNvbHZlKCRub2RlRGl2KTtcbiAgICAgIHJldHVybiBkdGQucHJvbWlzZSgpO1xuICAgIH0sXG4gICAgLy8gcmVjdXJzaXZlbHkgYnVpbGQgdGhlIHRyZWVcbiAgICBidWlsZEhpZXJhcmNoeTogZnVuY3Rpb24gKCRhcHBlbmRUbywgbm9kZURhdGEsIGxldmVsLCBvcHRzLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyICRub2RlV3JhcHBlcjtcbiAgICAgIC8vIENvbnN0cnVjdCB0aGUgbm9kZVxuICAgICAgdmFyICRjaGlsZE5vZGVzID0gbm9kZURhdGEuY2hpbGRyZW47XG4gICAgICB2YXIgaGFzQ2hpbGRyZW4gPSAkY2hpbGROb2RlcyA/ICRjaGlsZE5vZGVzLmxlbmd0aCA6IGZhbHNlO1xuICAgICAgdmFyIGlzVmVydGljYWxOb2RlID0gKG9wdHMudmVydGljYWxEZXB0aCAmJiAobGV2ZWwgKyAxKSA+PSBvcHRzLnZlcnRpY2FsRGVwdGgpID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgaWYgKE9iamVjdC5rZXlzKG5vZGVEYXRhKS5sZW5ndGggPiAxKSB7IC8vIGlmIG5vZGVEYXRhIGhhcyBuZXN0ZWQgc3RydWN0dXJlXG4gICAgICAgICRub2RlV3JhcHBlciA9IGlzVmVydGljYWxOb2RlID8gJGFwcGVuZFRvIDogJCgnPHRhYmxlPicpO1xuICAgICAgICBpZiAoIWlzVmVydGljYWxOb2RlKSB7XG4gICAgICAgICAgJGFwcGVuZFRvLmFwcGVuZCgkbm9kZVdyYXBwZXIpO1xuICAgICAgICB9XG4gICAgICAgICQud2hlbih0aGlzLmNyZWF0ZU5vZGUobm9kZURhdGEsIGxldmVsLCBvcHRzKSlcbiAgICAgICAgLmRvbmUoZnVuY3Rpb24oJG5vZGVEaXYpIHtcbiAgICAgICAgICBpZiAoaXNWZXJ0aWNhbE5vZGUpIHtcbiAgICAgICAgICAgICRub2RlV3JhcHBlci5hcHBlbmQoJG5vZGVEaXYpO1xuICAgICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgICRub2RlV3JhcHBlci5hcHBlbmQoJG5vZGVEaXYud3JhcCgnPHRyPjx0ZCcgKyAoaGFzQ2hpbGRyZW4gPyAnIGNvbHNwYW49XCInICsgJGNoaWxkTm9kZXMubGVuZ3RoICogMiArICdcIicgOiAnJykgKyAnPjwvdGQ+PC90cj4nKS5jbG9zZXN0KCd0cicpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmZhaWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ0ZhaWxlZCB0byBjcmVhdCBub2RlJylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBDb25zdHJ1Y3QgdGhlIGluZmVyaW9yIG5vZGVzIGFuZCBjb25uZWN0aW9uZyBsaW5lc1xuICAgICAgaWYgKGhhc0NoaWxkcmVuKSB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhub2RlRGF0YSkubGVuZ3RoID09PSAxKSB7IC8vIGlmIG5vZGVEYXRhIGlzIGp1c3QgYW4gYXJyYXlcbiAgICAgICAgICAkbm9kZVdyYXBwZXIgPSAkYXBwZW5kVG87XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlzSGlkZGVuID0gKGxldmVsICsgMSA+PSBvcHRzLmRlcHRoIHx8IG5vZGVEYXRhLmNvbGxhcHNlZCkgPyAnIGhpZGRlbicgOiAnJztcbiAgICAgICAgdmFyIGlzVmVydGljYWxMYXllciA9IChvcHRzLnZlcnRpY2FsRGVwdGggJiYgKGxldmVsICsgMikgPj0gb3B0cy52ZXJ0aWNhbERlcHRoKSA/IHRydWUgOiBmYWxzZTtcblxuICAgICAgICAvLyBkcmF3IHRoZSBsaW5lIGNsb3NlIHRvIHBhcmVudCBub2RlXG4gICAgICAgIGlmICghaXNWZXJ0aWNhbExheWVyKSB7XG4gICAgICAgICAgJG5vZGVXcmFwcGVyLmFwcGVuZCgnPHRyIGNsYXNzPVwibGluZXMnICsgaXNIaWRkZW4gKyAnXCI+PHRkIGNvbHNwYW49XCInICsgJGNoaWxkTm9kZXMubGVuZ3RoICogMiArICdcIj48ZGl2IGNsYXNzPVwiZG93bkxpbmVcIj48L2Rpdj48L3RkPjwvdHI+Jyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZHJhdyB0aGUgbGluZXMgY2xvc2UgdG8gY2hpbGRyZW4gbm9kZXNcbiAgICAgICAgdmFyIGxpbmVMYXllciA9ICc8dHIgY2xhc3M9XCJsaW5lcycgKyBpc0hpZGRlbiArICdcIj48dGQgY2xhc3M9XCJyaWdodExpbmVcIj4mbmJzcDs8L3RkPic7XG4gICAgICAgIGZvciAodmFyIGk9MTsgaTwkY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxpbmVMYXllciArPSAnPHRkIGNsYXNzPVwibGVmdExpbmUgdG9wTGluZVwiPiZuYnNwOzwvdGQ+PHRkIGNsYXNzPVwicmlnaHRMaW5lIHRvcExpbmVcIj4mbmJzcDs8L3RkPic7XG4gICAgICAgIH1cbiAgICAgICAgbGluZUxheWVyICs9ICc8dGQgY2xhc3M9XCJsZWZ0TGluZVwiPiZuYnNwOzwvdGQ+PC90cj4nO1xuICAgICAgICB2YXIgJG5vZGVMYXllcjtcbiAgICAgICAgaWYgKGlzVmVydGljYWxMYXllcikge1xuICAgICAgICAgICRub2RlTGF5ZXIgPSAkKCc8dWw+Jyk7XG4gICAgICAgICAgaWYgKGlzSGlkZGVuICYmIG9wdHMuZGVwdGggKyAxICE9PSBvcHRzLnZlcnRpY2FsRGVwdGgpIHtcbiAgICAgICAgICAgICRub2RlTGF5ZXIuYWRkQ2xhc3MoaXNIaWRkZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobGV2ZWwgKyAyID09PSBvcHRzLnZlcnRpY2FsRGVwdGgpIHtcbiAgICAgICAgICAgICRub2RlV3JhcHBlci5hcHBlbmQoJzx0ciBjbGFzcz1cInZlcnRpY2FsTm9kZXMnICsgaXNIaWRkZW4gKyAnXCI+PHRkPjwvdGQ+PC90cj4nKVxuICAgICAgICAgICAgICAuZmluZCgnLnZlcnRpY2FsTm9kZXMnKS5jaGlsZHJlbigpLmFwcGVuZCgkbm9kZUxheWVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJG5vZGVXcmFwcGVyLmFwcGVuZCgkbm9kZUxheWVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJG5vZGVMYXllciA9ICQoJzx0ciBjbGFzcz1cIm5vZGVzJyArIGlzSGlkZGVuICsgJ1wiPicpO1xuICAgICAgICAgICRub2RlV3JhcHBlci5hcHBlbmQobGluZUxheWVyKS5hcHBlbmQoJG5vZGVMYXllcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVjdXJzZSB0aHJvdWdoIGNoaWxkcmVuIG5vZGVzXG4gICAgICAgICQuZWFjaCgkY2hpbGROb2RlcywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyICRub2RlQ2VsbCA9IGlzVmVydGljYWxMYXllciA/ICQoJzxsaT4nKSA6ICQoJzx0ZCBjb2xzcGFuPVwiMlwiPicpO1xuICAgICAgICAgICRub2RlTGF5ZXIuYXBwZW5kKCRub2RlQ2VsbCk7XG4gICAgICAgICAgdGhhdC5idWlsZEhpZXJhcmNoeSgkbm9kZUNlbGwsIHRoaXMsIGxldmVsICsgMSwgb3B0cywgY2FsbGJhY2spO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIGJ1aWxkIHRoZSBjaGlsZCBub2RlcyBvZiBzcGVjaWZpYyBub2RlXG4gICAgYnVpbGRDaGlsZE5vZGU6IGZ1bmN0aW9uICgkYXBwZW5kVG8sIG5vZGVEYXRhLCBvcHRzLCBjYWxsYmFjaykge1xuICAgICAgdmFyIG9wdHMgPSBvcHRzIHx8ICRhcHBlbmRUby5jbG9zZXN0KCcub3JnY2hhcnQnKS5kYXRhKCdvcHRpb25zJyk7XG4gICAgICB2YXIgZGF0YSA9IG5vZGVEYXRhLmNoaWxkcmVuIHx8IG5vZGVEYXRhLnNpYmxpbmdzO1xuICAgICAgJGFwcGVuZFRvLmZpbmQoJ3RkOmZpcnN0JykuYXR0cignY29sc3BhbicsIGRhdGEubGVuZ3RoICogMik7XG4gICAgICB0aGlzLmJ1aWxkSGllcmFyY2h5KCRhcHBlbmRUbywgeyAnY2hpbGRyZW4nOiBkYXRhIH0sIDAsIG9wdHMsIGNhbGxiYWNrKTtcbiAgICB9LFxuICAgIC8vIGV4cG9zZWQgbWV0aG9kXG4gICAgYWRkQ2hpbGRyZW46IGZ1bmN0aW9uICgkbm9kZSwgZGF0YSwgb3B0cykge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIG9wdHMgPSBvcHRzIHx8ICRub2RlLmNsb3Nlc3QoJy5vcmdjaGFydCcpLmRhdGEoJ29wdGlvbnMnKTtcbiAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICB0aGlzLmJ1aWxkQ2hpbGROb2RlKCRub2RlLmNsb3Nlc3QoJ3RhYmxlJyksIGRhdGEsIG9wdHMsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoKytjb3VudCA9PT0gZGF0YS5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoISRub2RlLmNoaWxkcmVuKCcuYm90dG9tRWRnZScpLmxlbmd0aCkge1xuICAgICAgICAgICAgJG5vZGUuYXBwZW5kKCc8aSBjbGFzcz1cImVkZ2UgdmVydGljYWxFZGdlIGJvdHRvbUVkZ2UgZmFcIj48L2k+Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghJG5vZGUuZmluZCgnLnN5bWJvbCcpLmxlbmd0aCkge1xuICAgICAgICAgICAgJG5vZGUuY2hpbGRyZW4oJy50aXRsZScpLnByZXBlbmQoJzxpIGNsYXNzPVwiZmEgJysgb3B0cy5wYXJlbnROb2RlU3ltYm9sICsgJyBzeW1ib2xcIj48L2k+Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoYXQuc2hvd0NoaWxkcmVuKCRub2RlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICAvLyBidWlsZCB0aGUgcGFyZW50IG5vZGUgb2Ygc3BlY2lmaWMgbm9kZVxuICAgIGJ1aWxkUGFyZW50Tm9kZTogZnVuY3Rpb24gKCRjdXJyZW50Um9vdCwgbm9kZURhdGEsIG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIgJHRhYmxlID0gJCgnPHRhYmxlPicpO1xuICAgICAgbm9kZURhdGEucmVsYXRpb25zaGlwID0gbm9kZURhdGEucmVsYXRpb25zaGlwIHx8ICcwMDEnO1xuICAgICAgJC53aGVuKHRoaXMuY3JlYXRlTm9kZShub2RlRGF0YSwgMCwgb3B0cyB8fCAkY3VycmVudFJvb3QuY2xvc2VzdCgnLm9yZ2NoYXJ0JykuZGF0YSgnb3B0aW9ucycpKSlcbiAgICAgICAgLmRvbmUoZnVuY3Rpb24oJG5vZGVEaXYpIHtcbiAgICAgICAgICAkdGFibGUuYXBwZW5kKCRub2RlRGl2LnJlbW92ZUNsYXNzKCdzbGlkZS11cCcpLmFkZENsYXNzKCdzbGlkZS1kb3duJykud3JhcCgnPHRyIGNsYXNzPVwiaGlkZGVuXCI+PHRkIGNvbHNwYW49XCIyXCI+PC90ZD48L3RyPicpLmNsb3Nlc3QoJ3RyJykpO1xuICAgICAgICAgICR0YWJsZS5hcHBlbmQoJzx0ciBjbGFzcz1cImxpbmVzIGhpZGRlblwiPjx0ZCBjb2xzcGFuPVwiMlwiPjxkaXYgY2xhc3M9XCJkb3duTGluZVwiPjwvZGl2PjwvdGQ+PC90cj4nKTtcbiAgICAgICAgICB2YXIgbGluZXNSb3cgPSAnPHRkIGNsYXNzPVwicmlnaHRMaW5lXCI+Jm5ic3A7PC90ZD48dGQgY2xhc3M9XCJsZWZ0TGluZVwiPiZuYnNwOzwvdGQ+JztcbiAgICAgICAgICAkdGFibGUuYXBwZW5kKCc8dHIgY2xhc3M9XCJsaW5lcyBoaWRkZW5cIj4nICsgbGluZXNSb3cgKyAnPC90cj4nKTtcbiAgICAgICAgICB2YXIgJGNoYXJ0ID0gdGhhdC4kY2hhcnQ7XG4gICAgICAgICAgJGNoYXJ0LnByZXBlbmQoJHRhYmxlKVxuICAgICAgICAgICAgLmNoaWxkcmVuKCd0YWJsZTpmaXJzdCcpLmFwcGVuZCgnPHRyIGNsYXNzPVwibm9kZXNcIj48dGQgY29sc3Bhbj1cIjJcIj48L3RkPjwvdHI+JylcbiAgICAgICAgICAgIC5jaGlsZHJlbigndHI6bGFzdCcpLmNoaWxkcmVuKCkuYXBwZW5kKCRjaGFydC5jaGlsZHJlbigndGFibGUnKS5sYXN0KCkpO1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdGYWlsZWQgdG8gY3JlYXRlIHBhcmVudCBub2RlJyk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgLy8gZXhwb3NlZCBtZXRob2RcbiAgICBhZGRQYXJlbnQ6IGZ1bmN0aW9uICgkY3VycmVudFJvb3QsIGRhdGEsIG9wdHMpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHRoaXMuYnVpbGRQYXJlbnROb2RlKCRjdXJyZW50Um9vdCwgZGF0YSwgb3B0cywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghJGN1cnJlbnRSb290LmNoaWxkcmVuKCcudG9wRWRnZScpLmxlbmd0aCkge1xuICAgICAgICAgICRjdXJyZW50Um9vdC5jaGlsZHJlbignLnRpdGxlJykuYWZ0ZXIoJzxpIGNsYXNzPVwiZWRnZSB2ZXJ0aWNhbEVkZ2UgdG9wRWRnZSBmYVwiPjwvaT4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0LnNob3dQYXJlbnQoJGN1cnJlbnRSb290KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgLy8gc3Vic2VxdWVudCBwcm9jZXNzaW5nIG9mIGJ1aWxkIHNpYmxpbmcgbm9kZXNcbiAgICBjb21wbGVtZW50TGluZTogZnVuY3Rpb24gKCRvbmVTaWJsaW5nLCBzaWJsaW5nQ291bnQsIGV4aXN0aW5nU2libGlnQ291bnQpIHtcbiAgICAgIHZhciBsaW5lcyA9ICcnO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleGlzdGluZ1NpYmxpZ0NvdW50OyBpKyspIHtcbiAgICAgICAgbGluZXMgKz0gJzx0ZCBjbGFzcz1cImxlZnRMaW5lIHRvcExpbmVcIj4mbmJzcDs8L3RkPjx0ZCBjbGFzcz1cInJpZ2h0TGluZSB0b3BMaW5lXCI+Jm5ic3A7PC90ZD4nO1xuICAgICAgfVxuICAgICAgJG9uZVNpYmxpbmcucGFyZW50KCkucHJldkFsbCgndHI6Z3QoMCknKS5jaGlsZHJlbigpLmF0dHIoJ2NvbHNwYW4nLCBzaWJsaW5nQ291bnQgKiAyKVxuICAgICAgICAuZW5kKCkubmV4dCgpLmNoaWxkcmVuKCc6Zmlyc3QnKS5hZnRlcihsaW5lcyk7XG4gICAgfSxcbiAgICAvLyBidWlsZCB0aGUgc2libGluZyBub2RlcyBvZiBzcGVjaWZpYyBub2RlXG4gICAgYnVpbGRTaWJsaW5nTm9kZTogZnVuY3Rpb24gKCRub2RlQ2hhcnQsIG5vZGVEYXRhLCBvcHRzLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIG9wdHMgPSBvcHRzIHx8ICRub2RlQ2hhcnQuY2xvc2VzdCgnLm9yZ2NoYXJ0JykuZGF0YSgnb3B0aW9ucycpO1xuICAgICAgdmFyIG5ld1NpYmxpbmdDb3VudCA9IG5vZGVEYXRhLnNpYmxpbmdzID8gbm9kZURhdGEuc2libGluZ3MubGVuZ3RoIDogbm9kZURhdGEuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgdmFyIGV4aXN0aW5nU2libGlnQ291bnQgPSAkbm9kZUNoYXJ0LnBhcmVudCgpLmlzKCd0ZCcpID8gJG5vZGVDaGFydC5jbG9zZXN0KCd0cicpLmNoaWxkcmVuKCkubGVuZ3RoIDogMTtcbiAgICAgIHZhciBzaWJsaW5nQ291bnQgPSBleGlzdGluZ1NpYmxpZ0NvdW50ICsgbmV3U2libGluZ0NvdW50O1xuICAgICAgdmFyIGluc2VydFBvc3Rpb24gPSAoc2libGluZ0NvdW50ID4gMSkgPyBNYXRoLmZsb29yKHNpYmxpbmdDb3VudC8yIC0gMSkgOiAwO1xuICAgICAgLy8ganVzdCBidWlsZCB0aGUgc2libGluZyBub2RlcyBmb3IgdGhlIHNwZWNpZmljIG5vZGVcbiAgICAgIGlmICgkbm9kZUNoYXJ0LnBhcmVudCgpLmlzKCd0ZCcpKSB7XG4gICAgICAgIHZhciAkcGFyZW50ID0gJG5vZGVDaGFydC5jbG9zZXN0KCd0cicpLnByZXZBbGwoJ3RyOmxhc3QnKTtcbiAgICAgICAgJG5vZGVDaGFydC5jbG9zZXN0KCd0cicpLnByZXZBbGwoJ3RyOmx0KDIpJykucmVtb3ZlKCk7XG4gICAgICAgIHZhciBjaGlsZENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5idWlsZENoaWxkTm9kZSgkbm9kZUNoYXJ0LnBhcmVudCgpLmNsb3Nlc3QoJ3RhYmxlJyksIG5vZGVEYXRhLCBvcHRzLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoKytjaGlsZENvdW50ID09PSBuZXdTaWJsaW5nQ291bnQpIHtcbiAgICAgICAgICAgIHZhciAkc2libGluZ1RkcyA9ICRub2RlQ2hhcnQucGFyZW50KCkuY2xvc2VzdCgndGFibGUnKS5jaGlsZHJlbigndHI6bGFzdCcpLmNoaWxkcmVuKCd0ZCcpO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nU2libGlnQ291bnQgPiAxKSB7XG4gICAgICAgICAgICAgIHRoYXQuY29tcGxlbWVudExpbmUoJHNpYmxpbmdUZHMuZXEoMCkuYmVmb3JlKCRub2RlQ2hhcnQuY2xvc2VzdCgndGQnKS5zaWJsaW5ncygpLmFkZEJhY2soKS51bndyYXAoKSksIHNpYmxpbmdDb3VudCwgZXhpc3RpbmdTaWJsaWdDb3VudCk7XG4gICAgICAgICAgICAgICRzaWJsaW5nVGRzLmFkZENsYXNzKCdoaWRkZW4nKS5maW5kKCcubm9kZScpLmFkZENsYXNzKCdzbGlkZS1sZWZ0Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGF0LmNvbXBsZW1lbnRMaW5lKCRzaWJsaW5nVGRzLmVxKGluc2VydFBvc3Rpb24pLmFmdGVyKCRub2RlQ2hhcnQuY2xvc2VzdCgndGQnKS51bndyYXAoKSksIHNpYmxpbmdDb3VudCwgMSk7XG4gICAgICAgICAgICAgICRzaWJsaW5nVGRzLm5vdCgnOmVxKCcgKyBpbnNlcnRQb3N0aW9uICsgMSArICcpJykuYWRkQ2xhc3MoJ2hpZGRlbicpXG4gICAgICAgICAgICAgICAgLnNsaWNlKDAsIGluc2VydFBvc3Rpb24pLmZpbmQoJy5ub2RlJykuYWRkQ2xhc3MoJ3NsaWRlLXJpZ2h0JylcbiAgICAgICAgICAgICAgICAuZW5kKCkuZW5kKCkuc2xpY2UoaW5zZXJ0UG9zdGlvbikuZmluZCgnLm5vZGUnKS5hZGRDbGFzcygnc2xpZGUtbGVmdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHsgLy8gYnVpbGQgdGhlIHNpYmxpbmcgbm9kZXMgYW5kIHBhcmVudCBub2RlIGZvciB0aGUgc3BlY2lmaWMgbmRvZVxuICAgICAgICB2YXIgbm9kZUNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5idWlsZEhpZXJhcmNoeSgkbm9kZUNoYXJ0LmNsb3Nlc3QoJy5vcmdjaGFydCcpLCBub2RlRGF0YSwgMCwgb3B0cywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCsrbm9kZUNvdW50ID09PSBzaWJsaW5nQ291bnQpIHtcbiAgICAgICAgICAgIHRoYXQuY29tcGxlbWVudExpbmUoJG5vZGVDaGFydC5uZXh0KCkuY2hpbGRyZW4oJ3RyOmxhc3QnKVxuICAgICAgICAgICAgICAuY2hpbGRyZW4oKS5lcShpbnNlcnRQb3N0aW9uKS5hZnRlcigkKCc8dGQgY29sc3Bhbj1cIjJcIj4nKVxuICAgICAgICAgICAgICAuYXBwZW5kKCRub2RlQ2hhcnQpKSwgc2libGluZ0NvdW50LCAxKTtcbiAgICAgICAgICAgICRub2RlQ2hhcnQuY2xvc2VzdCgndHInKS5zaWJsaW5ncygpLmVxKDApLmFkZENsYXNzKCdoaWRkZW4nKS5maW5kKCcubm9kZScpLmFkZENsYXNzKCdzbGlkZS1kb3duJyk7XG4gICAgICAgICAgICAkbm9kZUNoYXJ0LnBhcmVudCgpLnNpYmxpbmdzKCkuYWRkQ2xhc3MoJ2hpZGRlbicpXG4gICAgICAgICAgICAgIC5zbGljZSgwLCBpbnNlcnRQb3N0aW9uKS5maW5kKCcubm9kZScpLmFkZENsYXNzKCdzbGlkZS1yaWdodCcpXG4gICAgICAgICAgICAgIC5lbmQoKS5lbmQoKS5zbGljZShpbnNlcnRQb3N0aW9uKS5maW5kKCcubm9kZScpLmFkZENsYXNzKCdzbGlkZS1sZWZ0Jyk7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvL1xuICAgIGFkZFNpYmxpbmdzOiBmdW5jdGlvbiAoJG5vZGUsIGRhdGEsIG9wdHMpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHRoaXMuYnVpbGRTaWJsaW5nTm9kZSgkbm9kZS5jbG9zZXN0KCd0YWJsZScpLCBkYXRhLCBvcHRzLCBmdW5jdGlvbigpIHtcbiAgICAgICAgJG5vZGUuY2xvc2VzdCgnLm5vZGVzJykuZGF0YSgnc2libGluZ3NMb2FkZWQnLCB0cnVlKTtcbiAgICAgICAgaWYgKCEkbm9kZS5jaGlsZHJlbignLmxlZnRFZGdlJykubGVuZ3RoKSB7XG4gICAgICAgICAgJG5vZGUuY2hpbGRyZW4oJy50b3BFZGdlJykuYWZ0ZXIoJzxpIGNsYXNzPVwiZWRnZSBob3Jpem9udGFsRWRnZSByaWdodEVkZ2UgZmFcIj48L2k+PGkgY2xhc3M9XCJlZGdlIGhvcml6b250YWxFZGdlIGxlZnRFZGdlIGZhXCI+PC9pPicpO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuc2hvd1NpYmxpbmdzKCRub2RlKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgLy9cbiAgICByZW1vdmVOb2RlczogZnVuY3Rpb24gKCRub2RlKSB7XG4gICAgICB2YXIgJHBhcmVudCA9ICRub2RlLmNsb3Nlc3QoJ3RhYmxlJykucGFyZW50KCk7XG4gICAgICB2YXIgJHNpYnMgPSAkcGFyZW50LnBhcmVudCgpLnNpYmxpbmdzKCk7XG4gICAgICBpZiAoJHBhcmVudC5pcygndGQnKSkge1xuICAgICAgICBpZiAodGhpcy5nZXROb2RlU3RhdGUoJG5vZGUsICdzaWJsaW5ncycpLmV4aXN0KSB7XG4gICAgICAgICAgJHNpYnMuZXEoMikuY2hpbGRyZW4oJy50b3BMaW5lOmx0KDIpJykucmVtb3ZlKCk7XG4gICAgICAgICAgJHNpYnMuc2xpY2UoMCwgMikuY2hpbGRyZW4oKS5hdHRyKCdjb2xzcGFuJywgJHNpYnMuZXEoMikuY2hpbGRyZW4oKS5sZW5ndGgpO1xuICAgICAgICAgICRwYXJlbnQucmVtb3ZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJHNpYnMuZXEoMCkuY2hpbGRyZW4oKS5yZW1vdmVBdHRyKCdjb2xzcGFuJylcbiAgICAgICAgICAgIC5maW5kKCcuYm90dG9tRWRnZScpLnJlbW92ZSgpXG4gICAgICAgICAgICAuZW5kKCkuZW5kKCkuc2libGluZ3MoKS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHBhcmVudC5hZGQoJHBhcmVudC5zaWJsaW5ncygpKS5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vXG4gICAgZXhwb3J0OiBmdW5jdGlvbiAoZXhwb3J0RmlsZW5hbWUsIGV4cG9ydEZpbGVleHRlbnNpb24pIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIGV4cG9ydEZpbGVuYW1lID0gKHR5cGVvZiBleHBvcnRGaWxlbmFtZSAhPT0gJ3VuZGVmaW5lZCcpID8gIGV4cG9ydEZpbGVuYW1lIDogdGhpcy5vcHRpb25zLmV4cG9ydEZpbGVuYW1lO1xuICAgICAgZXhwb3J0RmlsZWV4dGVuc2lvbiA9ICh0eXBlb2YgZXhwb3J0RmlsZWV4dGVuc2lvbiAhPT0gJ3VuZGVmaW5lZCcpID8gIGV4cG9ydEZpbGVleHRlbnNpb24gOiB0aGlzLm9wdGlvbnMuZXhwb3J0RmlsZWV4dGVuc2lvbjtcbiAgICAgIGlmICgkKHRoaXMpLmNoaWxkcmVuKCcuc3Bpbm5lcicpLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgJGNoYXJ0Q29udGFpbmVyID0gdGhpcy4kY2hhcnRDb250YWluZXI7XG4gICAgICB2YXIgJG1hc2sgPSAkY2hhcnRDb250YWluZXIuZmluZCgnLm1hc2snKTtcbiAgICAgIGlmICghJG1hc2subGVuZ3RoKSB7XG4gICAgICAgICRjaGFydENvbnRhaW5lci5hcHBlbmQoJzxkaXYgY2xhc3M9XCJtYXNrXCI+PGkgY2xhc3M9XCJmYSBmYS1jaXJjbGUtby1ub3RjaCBmYS1zcGluIHNwaW5uZXJcIj48L2k+PC9kaXY+Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkbWFzay5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICB9XG4gICAgICB2YXIgc291cmNlQ2hhcnQgPSAkY2hhcnRDb250YWluZXIuYWRkQ2xhc3MoJ2NhbnZhc0NvbnRhaW5lcicpLmZpbmQoJy5vcmdjaGFydDpub3QoXCIuaGlkZGVuXCIpJykuZ2V0KDApO1xuICAgICAgdmFyIGZsYWcgPSB0aGF0Lm9wdGlvbnMuZGlyZWN0aW9uID09PSAnbDJyJyB8fCB0aGF0Lm9wdGlvbnMuZGlyZWN0aW9uID09PSAncjJsJztcbiAgICAgIGh0bWwyY2FudmFzKHNvdXJjZUNoYXJ0LCB7XG4gICAgICAgICd3aWR0aCc6IGZsYWcgPyBzb3VyY2VDaGFydC5jbGllbnRIZWlnaHQgOiBzb3VyY2VDaGFydC5jbGllbnRXaWR0aCxcbiAgICAgICAgJ2hlaWdodCc6IGZsYWcgPyBzb3VyY2VDaGFydC5jbGllbnRXaWR0aCA6IHNvdXJjZUNoYXJ0LmNsaWVudEhlaWdodCxcbiAgICAgICAgJ29uY2xvbmUnOiBmdW5jdGlvbiAoY2xvbmVEb2MpIHtcbiAgICAgICAgICAkKGNsb25lRG9jKS5maW5kKCcuY2FudmFzQ29udGFpbmVyJykuY3NzKCdvdmVyZmxvdycsICd2aXNpYmxlJylcbiAgICAgICAgICAgIC5maW5kKCcub3JnY2hhcnQ6bm90KFwiLmhpZGRlblwiKTpmaXJzdCcpLmNzcygndHJhbnNmb3JtJywgJycpO1xuICAgICAgICB9LFxuICAgICAgICAnb25yZW5kZXJlZCc6IGZ1bmN0aW9uIChjYW52YXMpIHtcbiAgICAgICAgICAkY2hhcnRDb250YWluZXIuZmluZCgnLm1hc2snKS5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgaWYgKGV4cG9ydEZpbGVleHRlbnNpb24udG9Mb3dlckNhc2UoKSA9PT0gJ3BkZicpIHtcbiAgICAgICAgICAgIHZhciBkb2MgPSB7fTtcbiAgICAgICAgICAgIHZhciBkb2NXaWR0aCA9IE1hdGguZmxvb3IoY2FudmFzLndpZHRoICogMC4yNjQ2KTtcbiAgICAgICAgICAgIHZhciBkb2NIZWlnaHQgPSBNYXRoLmZsb29yKGNhbnZhcy5oZWlnaHQgKiAwLjI2NDYpO1xuICAgICAgICAgICAgaWYgKGRvY1dpZHRoID4gZG9jSGVpZ2h0KSB7XG4gICAgICAgICAgICAgIGRvYyA9IG5ldyBqc1BERignbCcsICdtbScsIFtkb2NXaWR0aCwgZG9jSGVpZ2h0XSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkb2MgPSBuZXcganNQREYoJ3AnLCAnbW0nLCBbZG9jSGVpZ2h0LCBkb2NXaWR0aF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9jLmFkZEltYWdlKGNhbnZhcy50b0RhdGFVUkwoKSwgJ3BuZycsIDAsIDApO1xuICAgICAgICAgICAgZG9jLnNhdmUoZXhwb3J0RmlsZW5hbWUgKyAnLnBkZicpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaXNXZWJraXQgPSAnV2Via2l0QXBwZWFyYW5jZScgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuICAgICAgICAgICAgdmFyIGlzRmYgPSAhIXdpbmRvdy5zaWRlYmFyO1xuICAgICAgICAgICAgdmFyIGlzRWRnZSA9IG5hdmlnYXRvci5hcHBOYW1lID09PSAnTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyJyB8fCAobmF2aWdhdG9yLmFwcE5hbWUgPT09IFwiTmV0c2NhcGVcIiAmJiBuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKCdFZGdlJykgPiAtMSk7XG5cbiAgICAgICAgICAgIGlmICgoIWlzV2Via2l0ICYmICFpc0ZmKSB8fCBpc0VkZ2UpIHtcbiAgICAgICAgICAgICAgd2luZG93Lm5hdmlnYXRvci5tc1NhdmVCbG9iKGNhbnZhcy5tc1RvQmxvYigpLCBleHBvcnRGaWxlbmFtZSArICcucG5nJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSAnLm9jLWRvd25sb2FkLWJ0bicgKyAodGhhdC5vcHRpb25zLmNoYXJ0Q2xhc3MgIT09ICcnID8gJy4nICsgdGhhdC5vcHRpb25zLmNoYXJ0Q2xhc3MgOiAnJyk7XG4gICAgICAgICAgICAgIGlmICghJGNoYXJ0Q29udGFpbmVyLmZpbmQoc2VsZWN0b3IpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICRjaGFydENvbnRhaW5lci5hcHBlbmQoJzxhIGNsYXNzPVwib2MtZG93bmxvYWQtYnRuJyArICh0aGF0Lm9wdGlvbnMuY2hhcnRDbGFzcyAhPT0gJycgPyAnICcgKyB0aGF0Lm9wdGlvbnMuY2hhcnRDbGFzcyA6ICcnKSArICdcIidcbiAgICAgICAgICAgICAgICAgICsgJyBkb3dubG9hZD1cIicgKyBleHBvcnRGaWxlbmFtZSArICcucG5nXCI+PC9hPicpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICRjaGFydENvbnRhaW5lci5maW5kKHNlbGVjdG9yKS5hdHRyKCdocmVmJywgY2FudmFzLnRvRGF0YVVSTCgpKVswXS5jbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGNoYXJ0Q29udGFpbmVyLnJlbW92ZUNsYXNzKCdjYW52YXNDb250YWluZXInKTtcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJGNoYXJ0Q29udGFpbmVyLnJlbW92ZUNsYXNzKCdjYW52YXNDb250YWluZXInKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAkLmZuLm9yZ2NoYXJ0ID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgICByZXR1cm4gbmV3IE9yZ0NoYXJ0KHRoaXMsIG9wdHMpLmluaXQoKTtcbiAgfTtcblxufSkpO1xuIl19
