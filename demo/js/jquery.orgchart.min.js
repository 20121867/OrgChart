"use strict";!function(e){"object"==typeof module&&"object"==typeof module.exports?e(require("jquery"),window,document):e(jQuery,window,document)}(function(e,t,i,n){var s=function(t,i){this.$chartContainer=e(t),this.opts=i,this.defaultOptions={nodeTitle:"name",nodeId:"id",toggleSiblingsResp:!1,depth:999,chartClass:"",exportButton:!1,exportFilename:"OrgChart",exportFileextension:"png",parentNodeSymbol:"fa-users",draggable:!1,direction:"t2b",pan:!1,zoom:!1,zoominLimit:7,zoomoutLimit:.5}};s.prototype={init:function(t){var i=this;this.options=e.extend({},this.defaultOptions,this.opts,t);var n=this.$chartContainer;this.$chart&&this.$chart.remove();var s=this.options.data,a=this.$chart=e("<div>",{data:{options:this.options},class:"orgchart"+(""!==this.options.chartClass?" "+this.options.chartClass:"")+("t2b"!==this.options.direction?" "+this.options.direction:""),click:function(t){e(t.target).closest(".node").length||a.find(".node.focused").removeClass("focused")}});return"undefined"!=typeof MutationObserver&&this.triggerInitEvent(),"object"===e.type(s)?s instanceof e?this.buildHierarchy(a,this.buildJsonDS(s.children()),0,this.options):this.buildHierarchy(a,this.options.ajaxURL?s:this.attachRel(s,"00"),0,this.options):(a.append('<i class="fa fa-circle-o-notch fa-spin spinner"></i>'),e.ajax({url:s,dataType:"json"}).done(function(e,t,n){i.buildHierarchy(a,i.options.ajaxURL?e:i.attachRel(e,"00"),0,i.options)}).fail(function(e,t,i){console.log(i)}).always(function(){a.children(".spinner").remove()})),n.append(a),this.options.exportButton&&!n.find(".oc-export-btn").length&&this.attachExportButton(),this.options.pan&&this.bindPan(),this.options.zoom&&this.bindZoom(),this},triggerInitEvent:function(){var t=this,i=new MutationObserver(function(n){i.disconnect();e:for(var s=0;s<n.length;s++)for(var a=0;a<n[s].addedNodes.length;a++)if(n[s].addedNodes[a].classList.contains("orgchart")&&t.options.initCompleted&&"function"==typeof t.options.initCompleted){t.options.initCompleted(t.$chart);var d=e.Event("init.orgchart");t.$chart.trigger(d);break e}});i.observe(this.$chartContainer[0],{childList:!0})},attachExportButton:function(){var t=this,i=e("<button>",{class:"oc-export-btn"+(""!==this.options.chartClass?" "+this.options.chartClass:""),text:"Export",click:function(e){e.preventDefault(),t.export()}});this.$chartContainer.append(i)},setOptions:function(e,t){return"string"==typeof e&&("pan"===e&&(t?this.bindPan():this.unbindPan()),"zoom"===e&&(t?this.bindZoom():this.unbindZoom())),"object"==typeof e&&(e.data?this.init(e):(void 0!==e.pan&&(e.pan?this.bindPan():this.unbindPan()),void 0!==e.zoom&&(e.zoom?this.bindZoom():this.unbindZoom()))),this},panStartHandler:function(t){var i=e(t.delegateTarget);if(e(t.target).closest(".node").length||t.touches&&t.touches.length>1)i.data("panning",!1);else{i.css("cursor","move").data("panning",!0);var n=0,s=0,a=i.css("transform");if("none"!==a){var d=a.split(",");-1===a.indexOf("3d")?(n=parseInt(d[4]),s=parseInt(d[5])):(n=parseInt(d[12]),s=parseInt(d[13]))}var o=0,r=0;if(t.targetTouches){if(1===t.targetTouches.length)o=t.targetTouches[0].pageX-n,r=t.targetTouches[0].pageY-s;else if(t.targetTouches.length>1)return}else o=t.pageX-n,r=t.pageY-s;i.on("mousemove touchmove",function(e){if(i.data("panning")){var t=0,n=0;if(e.targetTouches){if(1===e.targetTouches.length)t=e.targetTouches[0].pageX-o,n=e.targetTouches[0].pageY-r;else if(e.targetTouches.length>1)return}else t=e.pageX-o,n=e.pageY-r;var s=i.css("transform");if("none"===s)-1===s.indexOf("3d")?i.css("transform","matrix(1, 0, 0, 1, "+t+", "+n+")"):i.css("transform","matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, "+t+", "+n+", 0, 1)");else{var a=s.split(",");-1===s.indexOf("3d")?(a[4]=" "+t,a[5]=" "+n+")"):(a[12]=" "+t,a[13]=" "+n),i.css("transform",a.join(","))}}})}},panEndHandler:function(e){e.data.chart.data("panning")&&e.data.chart.data("panning",!1).css("cursor","default").off("mousemove")},bindPan:function(){this.$chartContainer.css("overflow","hidden"),this.$chart.on("mousedown touchstart",this.panStartHandler),e(i).on("mouseup touchend",{chart:this.$chart},this.panEndHandler)},unbindPan:function(){this.$chartContainer.css("overflow","auto"),this.$chart.off("mousedown touchstart",this.panStartHandler),e(i).off("mouseup touchend",this.panEndHandler)},zoomWheelHandler:function(e){var t=e.data.oc;e.preventDefault();var i=1+(e.originalEvent.deltaY>0?-.2:.2);t.setChartScale(t.$chart,i)},zoomStartHandler:function(e){if(e.touches&&2===e.touches.length){var t=e.data.oc;t.$chart.data("pinching",!0);var i=t.getPinchDist(e);t.$chart.data("pinchDistStart",i)}},zoomingHandler:function(e){var t=e.data.oc;if(t.$chart.data("pinching")){var i=t.getPinchDist(e);t.$chart.data("pinchDistEnd",i)}},zoomEndHandler:function(e){var t=e.data.oc;if(t.$chart.data("pinching")){t.$chart.data("pinching",!1);var i=t.$chart.data("pinchDistEnd")-t.$chart.data("pinchDistStart");i>0?t.setChartScale(t.$chart,1.2):i<0&&t.setChartScale(t.$chart,.8)}},bindZoom:function(){this.$chartContainer.on("wheel",{oc:this},this.zoomWheelHandler),this.$chartContainer.on("touchstart",{oc:this},this.zoomStartHandler),e(i).on("touchmove",{oc:this},this.zoomingHandler),e(i).on("touchend",{oc:this},this.zoomEndHandler)},unbindZoom:function(){this.$chartContainer.off("wheel",this.zoomWheelHandler),this.$chartContainer.off("touchstart",this.zoomStartHandler),e(i).off("touchmove",this.zoomingHandler),e(i).off("touchend",this.zoomEndHandler)},getPinchDist:function(e){return Math.sqrt((e.touches[0].clientX-e.touches[1].clientX)*(e.touches[0].clientX-e.touches[1].clientX)+(e.touches[0].clientY-e.touches[1].clientY)*(e.touches[0].clientY-e.touches[1].clientY))},setChartScale:function(e,i){var n=e.data("options"),s=e.css("transform"),a="",d=1;"none"===s?e.css("transform","scale("+i+","+i+")"):(a=s.split(","),-1===s.indexOf("3d")?(d=Math.abs(t.parseFloat(a[3])*i))>n.zoomoutLimit&&d<n.zoominLimit&&e.css("transform",s+" scale("+i+","+i+")"):(d=Math.abs(t.parseFloat(a[1])*i))>n.zoomoutLimit&&d<n.zoominLimit&&e.css("transform",s+" scale3d("+i+","+i+", 1)"))},buildJsonDS:function(t){var i=this,n={name:t.contents().eq(0).text().trim(),relationship:(t.parent().parent().is("li")?"1":"0")+(t.siblings("li").length?1:0)+(t.children("ul").length?1:0)};return t[0].id&&(n.id=t[0].id),t.children("ul").children().each(function(){n.children||(n.children=[]),n.children.push(i.buildJsonDS(e(this)))}),n},attachRel:function(e,t){var i=this;return e.relationship=t+(e.children&&e.children.length>0?1:0),e.children&&e.children.forEach(function(t){i.attachRel(t,"1"+(e.children.length>1?1:0))}),e},loopChart:function(t){var i=this,n=t.find("tr:first"),s={id:n.find(".node")[0].id};return n.siblings(":last").children().each(function(){s.children||(s.children=[]),s.children.push(i.loopChart(e(this)))}),s},getHierarchy:function(){return void 0===this.$chart?"Error: orgchart does not exist":this.$chart.find(".node").length?this.$chart.find(".node")[0].id?this.loopChart(this.$chart):"Error: Nodes of orghcart to be exported must have id attribute!":"Error: nodes do not exist"},getNodeState:function(e,t){var i={};if("parent"===(t=t||"self")){if((i=e.closest(".nodes").siblings(":first")).length)return i.is(".hidden")||!i.is(".hidden")&&i.closest(".nodes").is(".hidden")?{exist:!0,visible:!1}:{exist:!0,visible:!0}}else if("children"===t){if((i=e.closest("tr").siblings(":last")).length)return i.is(".hidden")?{exist:!0,visible:!1}:{exist:!0,visible:!0}}else if("siblings"===t){if((i=e.closest("table").parent().siblings()).length)return i.is(".hidden")||i.parent().is(".hidden")?{exist:!0,visible:!1}:{exist:!0,visible:!0}}else if((i=e).length)return i.closest(".nodes").length&&i.closest(".nodes").is(".hidden")||i.closest("table").parent().length&&i.closest("table").parent().is(".hidden")||i.parent().is("li")&&(i.closest("ul").is(".hidden")||i.closest("verticalNodes").is(".hidden"))?{exist:!0,visible:!1}:{exist:!0,visible:!0};return{exist:!1,visible:!1}},getRelatedNodes:function(t,i){return t&&t instanceof e&&t.is(".node")?"parent"===i?t.closest(".nodes").parent().children(":first").find(".node"):"children"===i?t.closest("tr").siblings(".nodes").children().find(".node:first"):"siblings"===i?t.closest("table").parent().siblings().find(".node:first"):e():e()},hideParentEnd:function(t){e(t.target).removeClass("sliding"),t.data.upperLevel.addClass("hidden").slice(1).removeAttr("style")},hideParent:function(e){var t=e.closest(".nodes").siblings();t.eq(0).find(".spinner").length&&e.closest(".orgchart").data("inAjax",!1),this.getNodeState(e,"siblings").visible&&this.hideSiblings(e),t.slice(1).css("visibility","hidden");var i=t.eq(0).find(".node");this.getNodeState(i).visible&&i.addClass("sliding slide-down").one("transitionend",{upperLevel:t},this.hideParentEnd),this.getNodeState(i,"parent").visible&&this.hideParent(i)},showParentEnd:function(t){var i=t.data.node;e(t.target).removeClass("sliding"),this.isInAction(i)&&this.switchVerticalArrow(i.children(".topEdge"))},showParent:function(e){var t=e.closest(".nodes").siblings().removeClass("hidden");t.eq(2).children().slice(1,-1).addClass("hidden");var i=t.eq(0).find(".node");this.repaint(i[0]),i.addClass("sliding").removeClass("slide-down").one("transitionend",{node:e},this.showParentEnd.bind(this))},stopAjax:function(e){e.find(".spinner").length&&e.closest(".orgchart").data("inAjax",!1)},isVisibleNode:function(t,i){return this.getNodeState(e(i)).visible},hideChildrenEnd:function(e){e.data.visibleNodes.removeClass("sliding"),e.data.isVerticalDesc?e.data.lowerLevel.addClass("hidden"):(e.data.visibleNodes.closest("table").closest("tr").prevAll(".lines").removeAttr("style").addClass("hidden").siblings(".nodes").addClass("hidden"),e.data.lowerLevel.last().find(".verticalNodes").addClass("hidden")),this.isInAction(e.data.node)&&this.switchVerticalArrow(e.data.node.children(".bottomEdge"))},hideChildren:function(e){var t=e.closest("tr").siblings();this.stopAjax(t.last());var i=t.last().find(".node").filter(this.isVisibleNode.bind(this)),n=!!t.last().is(".verticalNodes");n||i.closest("table").closest("tr").prevAll(".lines").css("visibility","hidden"),this.repaint(i.get(0)),i.addClass("sliding slide-up").eq(0).one("transitionend",{visibleNodes:i,lowerLevel:t,isVerticalDesc:n,node:e},this.hideChildrenEnd.bind(this))},showChildren:function(e){var t=this,i=e.closest("tr").siblings(),n=!!i.is(".verticalNodes")?i.removeClass("hidden").find(".node").filter(this.isVisibleNode.bind(this)):i.removeClass("hidden").eq(2).children().find(".node:first").filter(this.isVisibleNode.bind(this));this.repaint(n.get(0)),n.addClass("sliding").removeClass("slide-up").eq(0).one("transitionend",function(){n.removeClass("sliding"),t.isInAction(e)&&t.switchVerticalArrow(e.children(".bottomEdge"))})},hideSiblingsEnd:function(e){var t=e.data.node,i=e.data.nodeContainer,n=e.data.direction;e.data.lines.removeAttr("style");var s=n?"left"===n?i.prevAll(":not(.hidden)"):i.nextAll(":not(.hidden)"):i.siblings();i.closest(".nodes").prev().children(":not(.hidden)").slice(1,n?2*s.length+1:-1).addClass("hidden"),e.data.animatedNodes.removeClass("sliding"),s.find(".node:gt(0)").filter(this.isVisibleNode.bind(this)).removeClass("slide-left slide-right").addClass("slide-up"),s.find(".lines, .nodes, .verticalNodes").addClass("hidden").end().addClass("hidden"),this.isInAction(t)&&this.switchHorizontalArrow(t)},hideSiblings:function(e,t){var i=e.closest("table").parent();i.siblings().find(".spinner").length&&e.closest(".orgchart").data("inAjax",!1),t?"left"===t?i.prevAll().find(".node").filter(this.isVisibleNode.bind(this)).addClass("sliding slide-right"):i.nextAll().find(".node").filter(this.isVisibleNode.bind(this)).addClass("sliding slide-left"):(i.prevAll().find(".node").filter(this.isVisibleNode.bind(this)).addClass("sliding slide-right"),i.nextAll().find(".node").filter(this.isVisibleNode.bind(this)).addClass("sliding slide-left"));var n=i.siblings().find(".sliding"),s=n.closest(".nodes").prevAll(".lines").css("visibility","hidden");n.eq(0).one("transitionend",{node:e,nodeContainer:i,direction:t,animatedNodes:n,lines:s},this.hideSiblingsEnd.bind(this))},showSiblingsEnd:function(e){var t=e.data.node;e.data.visibleNodes.removeClass("sliding"),this.isInAction(t)&&(this.switchHorizontalArrow(t),t.children(".topEdge").removeClass("fa-chevron-up").addClass("fa-chevron-down"))},showSiblings:function(t,i){var n=e();n=i?"left"===i?t.closest("table").parent().prevAll().removeClass("hidden"):t.closest("table").parent().nextAll().removeClass("hidden"):t.closest("table").parent().siblings().removeClass("hidden");var s=t.closest("table").closest("tr").siblings();if(i?s.eq(2).children(".hidden").slice(0,2*n.length).removeClass("hidden"):s.eq(2).children(".hidden").removeClass("hidden"),!this.getNodeState(t,"parent").visible){s.removeClass("hidden");var a=s.find(".node")[0];this.repaint(a),e(a).addClass("sliding").removeClass("slide-down").one("transitionend",function(){e(this).removeClass("sliding")})}var d=n.find(".node").filter(this.isVisibleNode.bind(this));this.repaint(d.get(0)),d.addClass("sliding").removeClass("slide-left slide-right"),d.eq(0).one("transitionend",{node:t,visibleNodes:d},this.showSiblingsEnd.bind(this))},startLoading:function(t){var i=this.$chart;return(void 0===i.data("inAjax")||!0!==i.data("inAjax"))&&(t.addClass("hidden"),t.parent().append('<i class="fa fa-circle-o-notch fa-spin spinner"></i>').children().not(".spinner").css("opacity",.2),i.data("inAjax",!0),e(".oc-export-btn"+(""!==this.options.chartClass?"."+this.options.chartClass:"")).prop("disabled",!0),!0)},endLoading:function(t){var i=t.parent();t.removeClass("hidden"),i.find(".spinner").remove(),i.children().removeAttr("style"),this.$chart.data("inAjax",!1),e(".oc-export-btn"+(""!==this.options.chartClass?"."+this.options.chartClass:"")).prop("disabled",!1)},isInAction:function(e){return e.children(".edge").attr("class").indexOf("fa-")>-1},switchVerticalArrow:function(e){e.toggleClass("fa-chevron-up").toggleClass("fa-chevron-down")},switchHorizontalArrow:function(e){var t=e.closest(".orgchart").data("options");if(t.toggleSiblingsResp&&(void 0===t.ajaxURL||e.closest(".nodes").data("siblingsLoaded"))){var i=e.closest("table").parent().prev();i.length&&(i.is(".hidden")?e.children(".leftEdge").addClass("fa-chevron-left").removeClass("fa-chevron-right"):e.children(".leftEdge").addClass("fa-chevron-right").removeClass("fa-chevron-left"));var n=e.closest("table").parent().next();n.length&&(n.is(".hidden")?e.children(".rightEdge").addClass("fa-chevron-right").removeClass("fa-chevron-left"):e.children(".rightEdge").addClass("fa-chevron-left").removeClass("fa-chevron-right"))}else{var s=e.closest("table").parent().siblings(),a=!!s.length&&!s.is(".hidden");e.children(".leftEdge").toggleClass("fa-chevron-right",a).toggleClass("fa-chevron-left",!a),e.children(".rightEdge").toggleClass("fa-chevron-left",a).toggleClass("fa-chevron-right",!a)}},repaint:function(e){e&&(e.style.offsetWidth=e.offsetWidth)},nodeEnterLeaveHandler:function(t){var i=e(t.delegateTarget),n=!1,s=i.children(".topEdge"),a=(i.children(".rightEdge"),i.children(".bottomEdge")),d=i.children(".leftEdge");"mouseenter"===t.type?(s.length&&(n=this.getNodeState(i,"parent").visible,s.toggleClass("fa-chevron-up",!n).toggleClass("fa-chevron-down",n)),a.length&&(n=this.getNodeState(i,"children").visible,a.toggleClass("fa-chevron-down",!n).toggleClass("fa-chevron-up",n)),d.length&&this.switchHorizontalArrow(i)):i.children(".edge").removeClass("fa-chevron-up fa-chevron-down fa-chevron-right fa-chevron-left")},nodeClickHandler:function(t){this.$chart.find(".focused").removeClass("focused"),e(t.delegateTarget).addClass("focused")},loadNodes:function(t,i,n){var s=this,a=this.options;e.ajax({url:i,dataType:"json"}).done(function(i){s.$chart.data("inAjax")&&("parent"===t?e.isEmptyObject(i)||s.addParent(n.parent(),i,a):"children"===t?i.children.length&&s.addChildren(n.parent(),i,e.extend({},a,{depth:0})):(i.siblings||i.children)&&s.addSiblings(n.parent(),i,a))}).fail(function(){console.log("Failed to get "+t+" data")}).always(function(){s.endLoading(n)})},topEdgeClickHandler:function(t){t.stopPropagation();var i=this,n=e(t.target),s=e(t.delegateTarget),a=this.getNodeState(s,"parent");if(a.exist){var d=s.closest("table").closest("tr").siblings(":first").find(".node");if(d.is(".sliding"))return;a.visible?(this.hideParent(s),d.one("transitionend",function(){i.isInAction(s)&&(i.switchVerticalArrow(n),i.switchHorizontalArrow(s))})):this.showParent(s)}else if(this.startLoading(n)){var o=this.options,r=e.isFunction(o.ajaxURL.parent)?o.ajaxURL.parent(t.data.nodeData):o.ajaxURL.parent+s[0].id;this.loadNodes("parent",r,n)}},bottomEdgeClickHandler:function(t){t.stopPropagation();var i=e(t.target),n=e(t.delegateTarget),s=this.getNodeState(n,"children");if(s.exist){if(n.closest("tr").siblings(":last").find(".sliding").length)return;s.visible?this.hideChildren(n):this.showChildren(n)}else if(this.startLoading(i)){var a=this.options,d=e.isFunction(a.ajaxURL.children)?a.ajaxURL.children(t.data.nodeData):a.ajaxURL.children+n[0].id;this.loadNodes("children",d,i)}},hEdgeClickHandler:function(t){t.stopPropagation();var i=e(t.target),n=e(t.delegateTarget),s=this.options,a=this.getNodeState(n,"siblings");if(a.exist){if(n.closest("table").parent().siblings().find(".sliding").length)return;if(s.toggleSiblingsResp){var d=n.closest("table").parent().prev(),o=n.closest("table").parent().next();i.is(".leftEdge")?d.is(".hidden")?this.showSiblings(n,"left"):this.hideSiblings(n,"left"):o.is(".hidden")?this.showSiblings(n,"right"):this.hideSiblings(n,"right")}else a.visible?this.hideSiblings(n):this.showSiblings(n)}else if(this.startLoading(i)){var r=n[0].id,l=this.getNodeState(n,"parent").exist?e.isFunction(s.ajaxURL.siblings)?s.ajaxURL.siblings(t.data.nodeData):s.ajaxURL.siblings+r:e.isFunction(s.ajaxURL.families)?s.ajaxURL.families(t.data.nodeData):s.ajaxURL.families+r;this.loadNodes("siblings",l,i)}},createNode:function(n,s,a){var d=this;n.children||(n.children=[]),e.each(n.children,function(e,t){t.parentId=n.id});var o=e.Deferred(),r=e("<div"+(a.draggable?' draggable="true"':"")+(n[a.nodeId]?' id="'+n[a.nodeId]+'"':"")+(n.parentId?' data-parent="'+n.parentId+'"':"")+">").addClass("node "+(n.className||"")+(s>=a.depth?" slide-up":""));a.nodeTemplate?r.append(a.nodeTemplate(n)):r.append('<div class="title">'+n[a.nodeTitle]+"</div>").append(void 0!==a.nodeContent?'<div class="content">'+(n[a.nodeContent]||"")+"</div>":"");var l=n.relationship||"";if(a.verticalDepth&&s+2>a.verticalDepth){if(s+1>=a.verticalDepth&&Number(l.substr(2,1))){var h=s+1>=a.depth?"plus":"minus";r.append('<i class="toggleBtn fa fa-'+h+'-square"></i>')}}else Number(l.substr(0,1))&&r.append('<i class="edge verticalEdge topEdge fa"></i>'),Number(l.substr(1,1))&&r.append('<i class="edge horizontalEdge rightEdge fa"></i><i class="edge horizontalEdge leftEdge fa"></i>'),Number(l.substr(2,1))&&r.append('<i class="edge verticalEdge bottomEdge fa"></i>').children(".title").prepend('<i class="fa '+a.parentNodeSymbol+' symbol"></i>');return r.on("mouseenter mouseleave",this.nodeEnterLeaveHandler.bind(this)),r.on("click",this.nodeClickHandler.bind(this)),r.on("click",".topEdge",{nodeData:n},this.topEdgeClickHandler.bind(this)),r.on("click",".bottomEdge",{nodeData:n},this.bottomEdgeClickHandler.bind(this)),r.on("click",".leftEdge, .rightEdge",{nodeData:n},this.hEdgeClickHandler.bind(this)),r.on("click",".toggleBtn",function(t){var i=e(this),n=i.parent().next(),s=n.find(".node"),a=n.children().children(".node");a.is(".sliding")||(i.toggleClass("fa-plus-square fa-minus-square"),s.eq(0).is(".slide-up")?(n.removeClass("hidden"),d.repaint(a.get(0)),a.addClass("sliding").removeClass("slide-up").eq(0).one("transitionend",function(){a.removeClass("sliding")})):(s.addClass("sliding slide-up").eq(0).one("transitionend",function(){s.removeClass("sliding"),s.closest("ul").addClass("hidden")}),s.find(".toggleBtn").removeClass("fa-minus-square").addClass("fa-plus-square")))}),a.draggable&&r.on("dragstart",function(n){var s=n.originalEvent,d=/firefox/.test(t.navigator.userAgent.toLowerCase());if(d&&s.dataTransfer.setData("text/html","hack for firefox"),"none"!==r.closest(".orgchart").css("transform")){var o,l;i.querySelector(".ghost-node")?(o=r.closest(".orgchart").children(".ghost-node").get(0),l=e(o).children().get(0)):((o=i.createElementNS("http://www.w3.org/2000/svg","svg")).classList.add("ghost-node"),l=i.createElementNS("http://www.w3.org/2000/svg","rect"),o.appendChild(l),r.closest(".orgchart").append(o));var h=r.closest(".orgchart").css("transform").split(","),c=Math.abs(t.parseFloat("t2b"===a.direction||"b2t"===a.direction?h[0].slice(h[0].indexOf("(")+1):h[1]));o.setAttribute("width",r.outerWidth(!1)),o.setAttribute("height",r.outerHeight(!1)),l.setAttribute("x",5*c),l.setAttribute("y",5*c),l.setAttribute("width",120*c),l.setAttribute("height",40*c),l.setAttribute("rx",4*c),l.setAttribute("ry",4*c),l.setAttribute("stroke-width",1*c);var g=s.offsetX*c,p=s.offsetY*c;if("l2r"===a.direction?(g=s.offsetY*c,p=s.offsetX*c):"r2l"===a.direction?(g=r.outerWidth(!1)-s.offsetY*c,p=s.offsetX*c):"b2t"===a.direction&&(g=r.outerWidth(!1)-s.offsetX*c,p=r.outerHeight(!1)-s.offsetY*c),d){l.setAttribute("fill","rgb(255, 255, 255)"),l.setAttribute("stroke","rgb(191, 0, 0)");var f=i.createElement("img");f.src="data:image/svg+xml;utf8,"+(new XMLSerializer).serializeToString(o),s.dataTransfer.setDragImage(f,g,p)}else s.dataTransfer.setDragImage(o,g,p)}var v=e(this),u=v.closest(".nodes").siblings().eq(0).find(".node:first"),b=v.closest("table").find(".node");v.closest(".orgchart").data("dragged",v).find(".node").each(function(t,i){-1===b.index(i)&&(a.dropCriteria?a.dropCriteria(v,u,e(i))&&e(i).addClass("allowedDrop"):e(i).addClass("allowedDrop"))})}).on("dragover",function(t){t.preventDefault(),e(this).is(".allowedDrop")||(t.originalEvent.dataTransfer.dropEffect="none")}).on("dragend",function(t){e(this).closest(".orgchart").find(".allowedDrop").removeClass("allowedDrop")}).on("drop",function(t){var i=e(this),n=i.closest(".orgchart"),s=n.data("dragged"),a=s.closest(".nodes").siblings().eq(0).children(),d=e.Event("nodedrop.orgchart");if(n.trigger(d,{draggedNode:s,dragZone:a.children(),dropZone:i}),!d.isDefaultPrevented()){if(i.closest("tr").siblings().length){var o=parseInt(i.parent().attr("colspan"))+2,r='<i class="edge horizontalEdge rightEdge fa"></i><i class="edge horizontalEdge leftEdge fa"></i>';i.closest("tr").next().addBack().children().attr("colspan",o),s.find(".horizontalEdge").length||s.append(r),i.closest("tr").siblings().eq(1).children(":last").before('<td class="leftLine topLine">&nbsp;</td><td class="rightLine topLine">&nbsp;</td>').end().next().append(s.closest("table").parent());var l=s.closest("table").parent().siblings().find(".node:first");1===l.length&&l.append(r)}else i.append('<i class="edge verticalEdge bottomEdge fa"></i>').parent().attr("colspan",2).parent().after('<tr class="lines"><td colspan="2"><div class="downLine"></div></td></tr><tr class="lines"><td class="rightLine">&nbsp;</td><td class="leftLine">&nbsp;</td></tr><tr class="nodes"></tr>').siblings(":last").append(s.find(".horizontalEdge").remove().end().closest("table").parent());var h=parseInt(a.attr("colspan"));if(h>2){a.attr("colspan",h-2).parent().next().children().attr("colspan",h-2).end().next().children().slice(1,3).remove();var c=a.parent().siblings(".nodes").children().find(".node:first");1===c.length&&c.find(".horizontalEdge").remove()}else a.removeAttr("colspan").find(".bottomEdge").remove().end().end().siblings().remove()}}),a.createNode&&a.createNode(r,n),o.resolve(r),o.promise()},buildHierarchy:function(t,i,n,s,a){var d,o=this,r=i.children,l=!!r&&r.length,h=!!(s.verticalDepth&&n+1>=s.verticalDepth);if(Object.keys(i).length>1&&(d=h?t:e("<table>"),h||t.append(d),e.when(this.createNode(i,n,s)).done(function(e){h?d.append(e):d.append(e.wrap("<tr><td"+(l?' colspan="'+2*r.length+'"':"")+"></td></tr>").closest("tr")),a&&a()}).fail(function(){console.log("Failed to creat node")})),l){1===Object.keys(i).length&&(d=t);var c=n+1>=s.depth||i.collapsed?" hidden":"",g=!!(s.verticalDepth&&n+2>=s.verticalDepth);g||d.append('<tr class="lines'+c+'"><td colspan="'+2*r.length+'"><div class="downLine"></div></td></tr>');for(var p='<tr class="lines'+c+'"><td class="rightLine">&nbsp;</td>',f=1;f<r.length;f++)p+='<td class="leftLine topLine">&nbsp;</td><td class="rightLine topLine">&nbsp;</td>';p+='<td class="leftLine">&nbsp;</td></tr>';var v;g?(v=e("<ul>"),c&&s.depth+1!==s.verticalDepth&&v.addClass(c),n+2===s.verticalDepth?d.append('<tr class="verticalNodes'+c+'"><td></td></tr>').find(".verticalNodes").children().append(v):d.append(v)):(v=e('<tr class="nodes'+c+'">'),d.append(p).append(v)),e.each(r,function(){var t=e(g?"<li>":'<td colspan="2">');v.append(t),o.buildHierarchy(t,this,n+1,s,a)})}},buildChildNode:function(e,t,i,n){var i=i||e.closest(".orgchart").data("options"),s=t.children||t.siblings;e.find("td:first").attr("colspan",2*s.length),this.buildHierarchy(e,{children:s},0,i,n)},addChildren:function(e,t,i){var n=this,i=i||e.closest(".orgchart").data("options"),s=0;this.buildChildNode(e.closest("table"),t,i,function(){++s===t.children.length&&(e.children(".bottomEdge").length||e.append('<i class="edge verticalEdge bottomEdge fa"></i>'),e.find(".symbol").length||e.children(".title").prepend('<i class="fa '+i.parentNodeSymbol+' symbol"></i>'),n.showChildren(e))})},buildParentNode:function(t,i,n,s){var a=this,d=e("<table>");i.relationship=i.relationship||"001",e.when(this.createNode(i,0,n||t.closest(".orgchart").data("options"))).done(function(e){d.append(e.removeClass("slide-up").addClass("slide-down").wrap('<tr class="hidden"><td colspan="2"></td></tr>').closest("tr")),d.append('<tr class="lines hidden"><td colspan="2"><div class="downLine"></div></td></tr>');d.append('<tr class="lines hidden"><td class="rightLine">&nbsp;</td><td class="leftLine">&nbsp;</td></tr>');var t=a.$chart;t.prepend(d).children("table:first").append('<tr class="nodes"><td colspan="2"></td></tr>').children("tr:last").children().append(t.children("table").last()),s()}).fail(function(){console.log("Failed to create parent node")})},addParent:function(e,t,i){var n=this;this.buildParentNode(e,t,i,function(){e.children(".topEdge").length||e.children(".title").after('<i class="edge verticalEdge topEdge fa"></i>'),n.showParent(e)})},complementLine:function(e,t,i){for(var n="",s=0;s<i;s++)n+='<td class="leftLine topLine">&nbsp;</td><td class="rightLine topLine">&nbsp;</td>';e.parent().prevAll("tr:gt(0)").children().attr("colspan",2*t).end().next().children(":first").after(n)},buildSiblingNode:function(t,i,n,s){var a=this,n=n||t.closest(".orgchart").data("options"),d=i.siblings?i.siblings.length:i.children.length,o=t.parent().is("td")?t.closest("tr").children().length:1,r=o+d,l=r>1?Math.floor(r/2-1):0;if(t.parent().is("td")){t.closest("tr").prevAll("tr:last");t.closest("tr").prevAll("tr:lt(2)").remove();var h=0;this.buildChildNode(t.parent().closest("table"),i,n,function(){if(++h===d){var e=t.parent().closest("table").children("tr:last").children("td");o>1?(a.complementLine(e.eq(0).before(t.closest("td").siblings().addBack().unwrap()),r,o),e.addClass("hidden").find(".node").addClass("slide-left")):(a.complementLine(e.eq(l).after(t.closest("td").unwrap()),r,1),e.not(":eq("+l+"1)").addClass("hidden").slice(0,l).find(".node").addClass("slide-right").end().end().slice(l).find(".node").addClass("slide-left")),s()}})}else{var c=0;this.buildHierarchy(t.closest(".orgchart"),i,0,n,function(){++c===r&&(a.complementLine(t.next().children("tr:last").children().eq(l).after(e('<td colspan="2">').append(t)),r,1),t.closest("tr").siblings().eq(0).addClass("hidden").find(".node").addClass("slide-down"),t.parent().siblings().addClass("hidden").slice(0,l).find(".node").addClass("slide-right").end().end().slice(l).find(".node").addClass("slide-left"),s())})}},addSiblings:function(e,t,i){var n=this;this.buildSiblingNode(e.closest("table"),t,i,function(){e.closest(".nodes").data("siblingsLoaded",!0),e.children(".leftEdge").length||e.children(".topEdge").after('<i class="edge horizontalEdge rightEdge fa"></i><i class="edge horizontalEdge leftEdge fa"></i>'),n.showSiblings(e)})},removeNodes:function(e){var t=e.closest("table").parent(),i=t.parent().siblings();t.is("td")?this.getNodeState(e,"siblings").exist?(i.eq(2).children(".topLine:lt(2)").remove(),i.slice(0,2).children().attr("colspan",i.eq(2).children().length),t.remove()):i.eq(0).children().removeAttr("colspan").find(".bottomEdge").remove().end().end().siblings().remove():t.add(t.siblings()).remove()},export:function(n,s){var a=this;if(n=void 0!==n?n:this.options.exportFilename,s=void 0!==s?s:this.options.exportFileextension,e(this).children(".spinner").length)return!1;var d=this.$chartContainer,o=d.find(".mask");o.length?o.removeClass("hidden"):d.append('<div class="mask"><i class="fa fa-circle-o-notch fa-spin spinner"></i></div>');var r=d.addClass("canvasContainer").find('.orgchart:not(".hidden")').get(0),l="l2r"===a.options.direction||"r2l"===a.options.direction;html2canvas(r,{width:l?r.clientHeight:r.clientWidth,height:l?r.clientWidth:r.clientHeight,onclone:function(t){e(t).find(".canvasContainer").css("overflow","visible").find('.orgchart:not(".hidden"):first').css("transform","")},onrendered:function(e){if(d.find(".mask").addClass("hidden"),"pdf"===s.toLowerCase()){var o={},r=Math.floor(.2646*e.width),l=Math.floor(.2646*e.height);(o=r>l?new jsPDF("l","mm",[r,l]):new jsPDF("p","mm",[l,r])).addImage(e.toDataURL(),"png",0,0),o.save(n+".pdf")}else{var h="WebkitAppearance"in i.documentElement.style,c=!!t.sidebar,g="Microsoft Internet Explorer"===navigator.appName||"Netscape"===navigator.appName&&navigator.appVersion.indexOf("Edge")>-1;if(!h&&!c||g)t.navigator.msSaveBlob(e.msToBlob(),n+".png");else{var p=".oc-download-btn"+(""!==a.options.chartClass?"."+a.options.chartClass:"");d.find(p).length||d.append('<a class="oc-download-btn'+(""!==a.options.chartClass?" "+a.options.chartClass:"")+'" download="'+n+'.png"></a>'),d.find(p).attr("href",e.toDataURL())[0].click()}}}}).then(function(){d.removeClass("canvasContainer")},function(){d.removeClass("canvasContainer")})}},e.fn.orgchart=function(e){return new s(this,e).init()}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
